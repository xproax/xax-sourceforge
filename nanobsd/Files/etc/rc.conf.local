#!/bin/sh
# THIS FILE IS RESERVED FOR THE EXCLUSIVE USE OF FREENAS CONFIG SYSTEM.
# Please edit /etc/rc.conf instead.

#-
# Copyright (c) 2010 iXsystems, Inc., All rights reserved.
#   Written by:	Xin LI
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL Jordan Hubbard OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

FREENAS_CONFIG=/data/freenas-v1.db
FREENAS_SQLITE_CMD=/usr/local/bin/sqlite3
FREENAS_RC=/var/tmp/rc.conf.freenas

_interface_config()
{
	local IFS=\|
	local _ifid interface dodhcp ipv4addr subnetmask interfaces ipv6_interfaces

	ipv6_interfaces=""

	# Note: ipv4/ipv6 are supposed in ip/masklen format.

	# Traverse the network interface table and generate rc.conf style
	# configuration.
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT int_interface, int_dhcp, int_ipv4address, int_ipv6auto, int_ipv6address, int_options FROM network_interfaces ORDER BY id" | \
	while read interface dodhcp ipv4 doipv6auto ipv6 options; do
		echo -n ifconfig_${interface}=\"
		if [ "${dodhcp}" = "1" ]; then
			echo "DHCP"\"
		else
			if [ -n "${ipv4}" ]; then
				echo -n "inet ${ipv4} "
			fi
			if [ -n "${options}" ]; then
				echo -n "${options}"
			fi
			echo \"
		fi
		if [ "${doipv6auto}" = "0" ]; then
			if [ -n "${ipv6}" ]; then
				echo ipv6_ifconfig_${interface}=\"${ipv6}\"
				ipv6_interfaces="${ipv6_interfaces} ${interface}"
			fi
		else
			ipv6_interfaces="${ipv6_interfaces} ${interface}"
		fi
		# TODO: Since the variable exists only in the subshell, we 
		# have to make a workaround.
		if [ -n "${ipv6_interfaces}" ]; then
			echo "ipv6_enable=\"YES\""
			echo "ipv6_network_interfaces=\"lo0${ipv6_interfaces}\""
		fi
	done
}

_host_config()
{
	local IFS=\|
	local hostname domainname nameserver1 nameserver2 nameserver3 ipv4gateway ipv6gateway
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT gc_hostname, gc_domain, gc_nameserver1, gc_nameserver2, gc_nameserver3, gc_ipv4gateway, gc_ipv6gateway FROM network_globalconfiguration ORDER BY -id LIMIT 1" | \
	while read hostname domainname nameserver1 nameserver2 nameserver3 ipv4gateway ipv6gateway; do
		echo hostname=\"${hostname}.${domainname}\"
		if [ -n "${ipv4gateway}" ]; then
			echo defaultrouter=\"${ipv4gateway}\"
		fi
		if [ -n "${ipv6gateway}" ]; then
			echo defaultrouter=\"${ipv6gateway}\"
		fi
		# Generate resolv.conf
		if [ -n "${nameserver1}" ]; then
			echo search ${domainname} > /etc/resolv.conf
			echo nameserver ${nameserver1} >> /etc/resolv.conf
			if [ -n "${nameserver2}" ]; then
				echo nameserver ${nameserver2} >> /etc/resolv.conf
				if [ -n "${nameserver3}" ]; then
					echo nameserver ${nameserver3} >> /etc/resolv.conf
				fi
			fi
		fi
	done
}

# _bool_config /variable/ /table/ /field/
_bool_config()
{
	local IFS=\|
	local boolvalue value key
	if [ -n "$4" ]; then
		key="$4"
	else
		key="id"
	fi
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT $3 FROM $2 ORDER BY ${key} DESC LIMIT 1" | \
	while read boolvalue; do
		if [ "${boolvalue}" = "1" ]; then
			value="YES"
		else
			value="NO"
		fi
		echo $1=\"${value}\"
	done
}

# _count_config /variable/ /table/ /field/ /where/
_count_config()
{
	local count value
	count=`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT COUNT($3) FROM $2 WHERE $3$4"`
	if [ "${count}" -gt "0" ]; then
		value="YES"
	else
		value="NO"
	fi
	echo $1=\"${value}\"
}

# _bool_svcconfig /variable/ /service_name/
_bool_svcconfig()
{
	local IFS=\|
	local boolvalue value
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT srv_enable FROM services_services WHERE srv_service='$2' ORDER BY id DESC LIMIT 1" | \
	while read boolvalue; do
		if [ "${boolvalue}" = "1" ]; then
			value="YES"
		else
			value="NO"
		fi
		echo $1=\"${value}\"
	done
}

# Grab static route configuration
_staticroute_config()
{
	local IFS=\|
	local id destination gateway interface

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT id, sr_destination, sr_gateway FROM network_staticroute;" | \
	while read id destination gateway; do
		echo route_freenas${id}=\"-net ${destination} ${gateway}\"
	done
	echo static_routes=\"`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT id FROM network_staticroute" | sed -e s/^/freenas/g | xargs echo `\"
}

_gen_conf()
{
	## First, import network interface configuration.
	_interface_config
	_host_config
	_staticroute_config

	## Daemons
	_bool_config cron_enable system_cronjob cron_enable
	_count_config smartd_enable storage_disk disk_togglesmart =1
	_bool_svcconfig netatalk_enable afp
	_bool_svcconfig afpd_enable afp
	_bool_svcconfig cnid_metad_enable afp
	_bool_svcconfig proftpd_enable ftp
	_bool_svcconfig nfs_server_enable nfs
	_bool_svcconfig samba_enable cifs
	_bool_svcconfig rsyncd_enable rsync
	_bool_svcconfig bsnmpd_enable snmp
	_bool_svcconfig sshd_enable ssh

	_count_config zfs_enable storage_volume vol_fstype =\'ZFS\'

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT rcc_varname, rcc_varvalue FROM system_rcconf ORDER BY id ASC" | tr \| =
}

# If we're running really early, then mount /data read-only
if [ ! -f ${FREENAS_CONFIG} ]; then
	mount -o ro /data
	_doumount=1
fi

# Regenerate stale caches of rc.conf data.  We run multiple time
# as part of the boot process, and this helps.  It also provides
# a useful file to look at for debugging.
if [ ! -f ${FREENAS_RC} -o ${FREENAS_CONFIG} -nt ${FREENAS_RC} ]; then
	_gen_conf > ${FREENAS_RC}
fi

if [ -n "${_doumount}" ]; then
	umount /data
fi

. ${FREENAS_RC}
