#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-activedirectory
# REQUIRE: smbd

. /etc/rc.freenas

: ${NSS_LDAP_CONF:="/usr/local/etc/nss_ldap.conf"}

generate_nss_ldap_conf()
{
	local IFS="|"
	local nssconf="${NSS_LDAP_CONF}"

	dcname=$(AD_get dcname)
	domainname=$(AD_get domainname)
	adminname=$(AD_get adminname)
	adminpw=$(AD_get adminpw)

	base=$(echo "${domainname}" | awk '{
		n = split($0, parts, ".");
		if (n > 0) {
			base = sprintf("dc=%s", parts[1]);
			for (i=2;i <= n;i++) {
				base = sprintf("%s,dc=%s", base, parts[i]);
			}
			printf("%s", base);
		}
	}')

	[ -z "${dcname}" -o -z "${base}" ] && return 1 

	cat > "${nssconf}" <<-EOF
	host ${dcname}
	base ${base}
	uri ldap://${dcname}/
	binddn ${adminname}@${domainname}
	bindpw ${adminpw}
	scope sub
	ssl no
	nss_base_passwd ${base}?sub
	nss_base_shadow ${base}?sub
	nss_base_group ${base}?sub? &(objectCategory=group)(gidnumber=*)
	nss_map_objectclass posixAccount user
	nss_map_objectclass shadowAccount user
	nss_map_objectclass posixGroup group
	nss_map_attribute gecos cn
	nss_map_attribute homeDirectory unixHomeDirectory
	nss_map_attribute uniqueMember member
EOF
	ln -s ${nssconf} "$(dirname ${nssconf})/ldap.conf" 2>/dev/null

	return 0
}

setup_homedirs()
{
	local hdsrc="/var/home"
	local hddst="/home"

	local dst=$(dirname "${hddst}")

	mount -uw /	

	mkdir -p "${hdsrc}"
	mkdir -p "${dst}"
	ln -s "${hdsrc}" "${dst}" 2>/dev/null

	mount -ur /
}

activedirectory_start()
{
	if srv_enabled activedirectory
	then
		AD_init
		if ! AD_join_domain; then
			return $?
		fi

		#generate_nss_ldap_conf

		setup_homedirs
		create_cache_filesystem
		mkdir -p ${FREENAS_CACHEDIR}/.samba

		sleep 10
		/usr/sbin/service samba restart >/dev/null 2>&1
	fi
}

activedirectory_status()
{
	AD_init
	AD_status_domain >/dev/null
}

activedirectory_stop()
{
	AD_init

        /usr/local/www/freenasUI/tools/cachetool.py expire
	AD_leave_domain
}


name="ix-activedirectory"
start_cmd='activedirectory_start'
status_cmd='activedirectory_status'
stop_cmd='activedirectory_stop'
            
load_rc_config $name
run_rc_command "$1"
