#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-activedirectory
# REQUIRE: smbd

. /etc/rc.freenas

: ${NSS_LDAP_CONF:="/usr/local/etc/nss_ldap.conf"}

: ${FREENAS_CACHEDIR:="/var/tmp/.cache"}
: ${FREENAS_CACHESIZE:="100m"}

join_activedirectory_domain()
{
	local IFS="|"

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ad_adminname,
		ad_adminpw

	FROM
		services_services,
		services_activedirectory

	WHERE (
		srv_service = 'activedirectory' and
		srv_enable = '1'
	)

	ORDER BY
		-services_activedirectory.id

	LIMIT 1
	" | \
	while read adminname adminpw
	do
		/usr/local/bin/net ads join -U "${adminname}%${adminpw}"
	done
}

generate_nss_ldap_conf()
{
	local IFS="|"
	local nssconf="${NSS_LDAP_CONF}"

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ad_dcname,
		ad_domainname,
		ad_adminname,
		ad_adminpw

	FROM
		services_services,
		services_activedirectory

	WHERE
		(srv_service = 'activedirectory' and srv_enable = 1)
	" | \
	while read dcname domainname adminname adminpw 
	do
		base=$(echo "${domainname}" | awk '{
			n = split($0, parts, ".");
			if (n > 0) {
				base = sprintf("dc=%s", parts[1]);
				for (i=2;i <= n;i++) {
					base = sprintf("%s,dc=%s", base, parts[i]);
				}
				printf("%s", base);
			}
		}')

		[ -z "${dcname}" -o -z "${base}" ] && return 1 

		cat<<-EOF>"${nssconf}"
		host ${dcname}
		base ${base}
		uri ldap://${dcname}/
		binddn ${adminname}@${domainname}
		bindpw ${adminpw}
		scope sub
		ssl no
		nss_base_passwd ${base}?sub
		nss_base_shadow ${base}?sub
		nss_base_group ${base}?sub? &(objectCategory=group)(gidnumber=*)
		nss_map_objectclass posixAccount user
		nss_map_objectclass shadowAccount user
		nss_map_objectclass posixGroup group
		nss_map_attribute gecos cn
		nss_map_attribute homeDirectory unixHomeDirectory
		nss_map_attribute uniqueMember member
EOF
	done

	ln -s ${nssconf} "$(dirname ${nssconf})/ldap.conf" 2>/dev/null

	return 0
}

setup_homedirs()
{
	local hdsrc="/var/home"
	local hddst="/home"

	local dst=$(dirname "${hddst}")

	mount -uw /	

	mkdir -p "${hdsrc}"
	mkdir -p "${dst}"
	ln -s "${hdsrc}" "${dst}" 2>/dev/null

	mount -ur /
}

create_cache_filesystem()
{
	res=1
	if mount | egrep -q "^/dev/md[0-9]+.*${FREENAS_CACHEDIR}" 2>/dev/null
	then
		mddev=$(mount|egrep "^/dev/md[0-9]+.*${FREENAS_CACHEDIR}"|\
			sed -E "s#^/dev/(md[0-9]+).+#\1#"|awk '{ print $1 }')

		if ! umount "${FREENAS_CACHEDIR}" >/dev/null 2>&1
		then
			return ${res}
		fi

		mdconfig -d -u "${mddev}"
	fi

	mkdir -p "${FREENAS_CACHEDIR}"
	if mdmfs -s "${FREENAS_CACHESIZE}" md "${FREENAS_CACHEDIR}"
	then
		res=0
	fi

	return ${res}
}

activedirectory_enabled()
{
	local res=1
	local enabled

	enabled=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		count(*)

	FROM
		services_services

	WHERE (
		srv_service = 'activedirectory' and
		srv_enable = 1
	)

	ORDER BY
		-services_services.id

	LIMIT 1")

	if [ "${enabled}" = "1" ]
	then
		res=0
	fi

	return ${res}
}

do_activedirectory_stuff()
{
	if activedirectory_enabled
	then
		join_activedirectory_domain
		setup_homedirs
		create_cache_filesystem
		sleep 10
		/usr/sbin/service samba restart >/dev/null 2>&1
	fi
}

expire_cache()
{
        /usr/local/www/freenasUI/tools/cachetool.py expire
}

name="ix-activedirectory"
start_cmd='do_activedirectory_stuff'
stop_cmd='expire_cache'
            
load_rc_config $name
run_rc_command "$1"
