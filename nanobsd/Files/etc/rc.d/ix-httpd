#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-httpd
# REQUIRE: lighttpd

. /etc/rc.freenas

generate_httpd_conf()
{
	local res=1
	local ssl_enable="${1}"
	local bind_addr="${2}"
	local bind_port="${3}"
	local tmp

	# XXX: IPv6
	if [ "${bind_addr}" != "0.0.0.0" -a -n "${bind_addr}" -a -z "$(/sbin/ifconfig -a|grep ${bind_addr})" ]; then
		bind_addr="0.0.0.0"
	fi

	tmp=$(mktemp /tmp/tmp.XXXXXX)

	awk -v ssl_enable="${ssl_enable}" \
		-v ssl_cert="${HTTPDCERT}" \
		-v httpd_addr="${bind_addr}" \
		-v httpd_port="${bind_port}" '
		BEGIN {
			ssl_engine = 0;
			ssl_pemfile = 0;
		}

		{
			if (/^(( |\t)*)?server.port/) {
				if (!httpd_port) {
					httpd_port = ssl_enable ? 443 : 80;
				}
				printf("server.port\t= \"%d\"\n", httpd_port)

			} else if (/^(( |\t|#)*)?server.bind/) {
				if (httpd_addr) {
					printf("server.bind\t= \"%s\"\n", httpd_addr)
				} else {
					printf("#%s", $0)
				}

			} else if (/^(( |\t)*)?ssl\.engine/) {
				next;

			} else if (/^(( |\t)*)?ssl\.pemfile/) {
				next;

			} else {
				print $0;
			}
		}

		END {
			if (ssl_enable) {
				printf("ssl.engine = \"enable\"\n");
				printf("ssl.pemfile = \"%s\"\n", ssl_cert);
			}
		}
	' "${HTTPDCONF}" > "${tmp}"
	
	${HTTPD} -t -f "${tmp}" >/dev/null 2>&1
	rc=$?
	if [ $rc -eq 0 ]; then
		mv "${tmp}" "${HTTPDCONF}"
	else
		rm -f "${tmp}"
	fi

	return $rc
}

get_host_ip()
{
	ifconfig -a inet| grep broadcast|cut -f2 -d' '|head -n1
}

test_httpd_config()
{
	local ssl_enable="${1}"
	local port="${2}"
	local proto="http"
	local ntries=5
	local res=1
	local try=0

	if [ "${ssl_enable}" = "1" ]
	then
		proto="https"
	fi
	
	local host=$(get_host_ip)
	if [ -n "${port}" ]
	then
		host="${host}:${port}"
	fi


	${HTTPDSCRIPT} onerestart >/dev/null 2>&1
	rc=$?
	if [ $rc -eq 0 ]; then
		echo -n "Waiting for ${proto}... "
		export HTTP_TIMEOUT=1
		export FTP_TIMEOUT=1
		while [ "${try}" -lt "${ntries}" ]
		do
			fetch -q -o /dev/null "${proto}://${host}" \
			    >/dev/null 2>&1
			if [ $? -eq 0 ]; then
				rc=0
				break		
			fi

			: $(( try += 1 ))
		done
		if [ $rc -eq 0 ]; then
			echo "Done."
		else
			echo "Failed."
		fi
	fi

	return $rc
}

set_stg_guiprotocol()
{
	local res=1
	local proto="${1}"

	if [ "${proto}" = "http" -o "${proto}" = "https" ]
	then
		${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
		UPDATE
			system_settings
		SET
			stg_guiprotocol = '${proto}'
		"
		res=$?
	fi

	return ${res}
}

do_httpd_config()
{
	local IFS="|"
	local f="stg_guiprotocol stg_guiaddress stg_guiport"
	eval local $f
	local sf=$(var_to_sf $f)
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		$sf

	FROM
		system_settings

	ORDER BY
		-id

	LIMIT 1
	" | \
	while eval read $f
	do
		local ssl_enable=0

		stg_guiprotocol=$(echo "${stg_guiprotocol}"|tr a-z A-Z)
		case "${stg_guiprotocol}" in
			HTTP) ssl_enable=0; ;;
			HTTPS) ssl_enable=1; ;;
		esac

		if [ "${ssl_enable}" = "1" -a ! -f "${SSLCONF}" ]
		then
			set_stg_guiprotocol "http"
			ssl_enable=0
		fi

		generate_httpd_conf "${ssl_enable}" "${stg_guiaddress}" "${stg_guiport}"
		if ! test_httpd_config "${ssl_enable}" "${stg_guiport}"
		then

			if [ "${ssl_enable}" = "1" ]
			then
				ssl_enable=0
				set_stg_guiprotocol "http"
			fi

			generate_httpd_conf "${ssl_enable}" "${stg_guiaddress}" "${stg_guiport}"
			${HTTPDSCRIPT} start
		fi
	done
}


name="ix-httpd"
start_cmd='do_httpd_config'
stop_cmd=':'
            
load_rc_config $name
run_rc_command "$1"
