#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-loader
# REQUIRE: ix-update

. /etc/rc.subr

# Update an file that persists across reboots with a new file if something's
# changed, or nuke it if the file was unchanged.
#
# TODO: move to rc.freenas.
#
# Parameters:
#   1 - Old file
#   2 - New file
#
# Returns...
#   0 - updated something.
#   1 - no change.
#   2 - an error occurred.
update_persistent_file()
{
	local new old rc

	old=$1
	new=$2

	rc=1
	if [ ! -f "$new" ]; then
		:
	elif cmp -s "$old" "$new"; then
		rm -f "$new"
	else
		rc=2
		if mount -uw /; then
			if mv "$new" "$old"; then
				rc=0
			fi
			mount -ur /
		fi
	fi
	return $rc
}

loader_serial()
{
	local serial_enable=0

	serial_enable=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		adv_serialconsole

	FROM
		system_advanced
	
	ORDER BY
		-id
	LIMIT 1")

	if [ "${serial_enable}" != "0" ]; then
		echo 'boot_multicons="YES"'
		echo 'console="vidconsole,comconsole"'
	fi
}

loader_saver()
{
	local saver_enable=0

	saver_enable=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		adv_consolescreensaver

	FROM
		system_advanced
	
	ORDER BY
		-id
	LIMIT 1")

	if [ "${saver_enable}" != "0" ]; then
		echo 'screensave_load="YES"'
		echo 'screensave_name="daemon_saver"'
	fi

}

loader_user() {

	local IFS="|"
	local f="tun_var tun_value tun_comment"
	eval local $f
	local sf=$(var_to_sf $f)
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} \
	"SELECT $sf FROM system_tunable ORDER BY id" | \
	while eval read $f; do
		(echo -n "${tun_var}=\"${tun_value}\""
		 if [ -n "${tun_comment}" ]; then
			echo -e " # ${tun_comment}"
		 else
			echo
		 fi)
	done

}

generate_boot_loader_conf()
{
	local tmp

	export PATH=$PATH:/usr/local/bin:/usr/local/sbin

	autotune=/usr/local/bin/autotune
	if [ -x $autotune ]; then
		tmp=$(mktemp /tmp/tmp.XXXXXX)

		# 1. Do autotuning magic here with $autotune
		# 2. Output the contents of your autotuning magic to $tmp.
		# 3. Profit!
		#
		# Don't remove this context and please don't change the
		# comments ;)..


		# End autotuning context.

	fi
	if update_persistent_file /boot/loader.conf $tmp; then
		reboot_now=true
	fi
}

generate_boot_loader_conf_local()
{
	local settings
	local tmp

	settings="serial saver user"

	tmp=$(mktemp /tmp/tmp.XXXXXX)

	for setting in $settings; do
		eval "loader_${setting}" >> $tmp
	done

	update_persistent_file /boot/loader.conf.local $tmp
}

generate_loader_confs()
{
	reboot_now=false

	generate_boot_loader_conf
	generate_boot_loader_conf_local

	if $reboot_now; then
		reboot
	fi
}

name="ix-loader"
start_cmd='generate_loader_confs'
stop_cmd=':'

load_rc_config $name
run_rc_command "$1"
