#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-nginx
# REQUIRE: django
# BEFORE: nginx

. /etc/rc.freenas


NGINX_PLUGINS_CONF="${HTTPDDIR}/plugins.conf"
NGINX_FASTCGI_PARAMS="${HTTPDDIR}/fastcgi_params"


generate_plugins_conf()
{
	local IFS="|"
	local nginx_location

	: > "${NGINX_PLUGINS_CONF}"
	plugins_path=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		plugins_path
	FROM
		services_pluginsjail
	ORDER BY
		-id
	LIMIT 1")

	ip=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		jail_ipv4address
	FROM
		services_pluginsjail
	ORDER BY
		-id
	LIMIT 1")

        # Workaround: config check fail if it doesnt exist
        mkdir -p /var/tmp/nginx 2> /dev/null > /dev/null

	if [ -z "${ip}" ]; then
		return 0
	fi

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		plugin_name,
		plugin_enabled,
		plugin_port,
		plugin_path

	FROM
		plugins_plugins

	ORDER BY
		-id
	" | \
	while read -r name enabled port path
	do

		cat<<-__EOF__>>"${NGINX_PLUGINS_CONF}"
		location ~ /plugins/${name}/ {
		    fastcgi_pass   ${ip}:${port};
		    include		fastcgi_params;
		    root /usr/pbi/${name}-$(uname -m);
__EOF__

		nginx_location="${plugins_path}/pbi/${name}-$(uname -m)/nginx_location"
		if [ -f ${nginx_location} ]; then
			tmp=$(mktemp -t nginx)
			echo "
			events {}
			http {
				server {
					location / {
						$(cat ${nginx_location})
					}
				}
			}
			" > ${tmp}
			${HTTPD} -t -c ${tmp} 2> /dev/null > /dev/null
			if [ $? -eq 0 ]; then
				cat ${nginx_location} >> "${NGINX_PLUGINS_CONF}"
			fi

		fi

		cat<<-__EOF__>>"${NGINX_PLUGINS_CONF}"
		}
__EOF__

	done
}


generate_nginx_conf()
{
	local res=1
	local proto="${1}"
	local addr="${2}"
	local port="${3}"
	local working_ssl=false
	
	{
	cat << __EOF__
#
#    FreeNAS nginx configuration file
#

user www www;
worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # reserve 1MB under the name 'proxied' to track uploads
    upload_progress proxied 1m;

    sendfile        on;
    #tcp_nopush     on;
    client_max_body_size 500m;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    #upload_store /var/tmp/firmware;
    client_body_temp_path /var/tmp/firmware;

    server {
        server_name  localhost;
__EOF__

	if [ "${proto}" = "https" ]; then

		local validcert=0
		${OPENSSL} x509 -in "${HTTPDCERT}" -noout -text -dates -purpose > /dev/null
		let "validcert |= $?" > /dev/null
		${OPENSSL} rsa -in "${HTTPDKEY}" -check -noout > /dev/null
		let "validcert |= $?" > /dev/null

		if [ ${validcert} -eq 0 ]; then
			working_ssl=true
			cat << __EOF__
        listen       ${addr}:${port} default_server ssl;

        ssl_certificate      ${HTTPDCERT};
        ssl_certificate_key  ${HTTPDKEY};
__EOF__
		else
			port=80
			touch /tmp/alert_invalid_ssl_nginx
		fi
	fi

	if ! ${working_ssl}; then
		echo "        listen       ${addr}:${port};"
	fi

	cat << __EOF__
        #ssl_session_timeout  5m;
        #ssl_protocols  SSLv2 SSLv3 TLSv1;
        #ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_prefer_server_ciphers   on;

        location / {
            include fastcgi_params;
            fastcgi_pass 127.0.0.1:9042;
            fastcgi_pass_header Authorization;
            fastcgi_intercept_errors off;
            fastcgi_read_timeout 10m;
            #fastcgi_temp_path /var/tmp/firmware;

            # track uploads in the 'proxied' zone
            # remember connections for 30s after they finished
            track_uploads proxied 30s;
        }

        location /progress {
            # report uploads tracked in the 'proxied' zone
            report_uploads proxied;
        }

        location /dojango {
            alias /usr/local/www/freenasUI/dojango;
        }

        location /static {
            alias /usr/local/www/freenasUI/freeadmin/static;
        }

        location /reporting/graphs {
            alias /var/db/graphs;
        }

        #FIXME: get version from freenasUI.settings
        location /dojango/dojo-media/release/1.8.1 {
            alias /usr/local/www/dojo;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/local/www/nginx-dist;
        }

        include plugins.conf;
    }
__EOF__

	if [ ${proto} = "https" -a ${working_ssl} = true ]; then
		cat << __EOF__
    server {
	listen ${addr}:80;
	server_name localhost;
	rewrite ^ https://\$server_addr:${port}\$request_uri? permanent;
    }
__EOF__
	fi

	echo "}";

	} > ${HTTPDCONF}

}


set_stg_guiprotocol()
{
	local res=1
	local proto="${1}"

	if [ "${proto}" = "http" -o "${proto}" = "https" ]
	then
		${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
		UPDATE
			system_settings
		SET
			stg_guiprotocol = '${proto}'
		"
		res=$?
	fi

	return ${res}
}


set_stg_guiport()
{
	local res=1
	local port="${1}"

	: $((port += 0))

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	UPDATE
		system_settings
	SET
		stg_guiport = '${port}'
	"
	res=$?

	return ${res}
}


generate_fastcgi_params()
{
	local IFS="|"

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		stg_guiprotocol

	FROM
		system_settings

	ORDER BY
		-id

	LIMIT 1
	" | \
	while read stg_guiprotocol
	do
		local ssl_enable=0

		stg_guiprotocol=$(echo "${stg_guiprotocol}"|tr a-z A-Z)
		case "${stg_guiprotocol}" in
			HTTP) ssl_enable=0; ;;
			HTTPS) ssl_enable=1; ;;
		esac

		local tmp="$(mktemp /tmp/tmp.XXXXXX)"
		grep -Eiv '^( |\t)*fastcgi_param( |\t)+https( |\t)+' \
			< "${NGINX_FASTCGI_PARAMS}" > "${tmp}"

		if [ "${ssl_enable}" = "1" ]
		then
			echo "fastcgi_param HTTPS on;" >> "${tmp}"
		fi
		mv "${tmp}" "${NGINX_FASTCGI_PARAMS}"
	done
}


get_nginx_settings()
{
	local settings=$(
		local IFS="|"
		${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
		SELECT
			stg_guiprotocol,
			stg_guiaddress,
			stg_guiport

		FROM
			system_settings

		ORDER BY
			-id

		LIMIT 1
		" | \
		while read stg_guiprotocol stg_guiaddress stg_guiport
		do
			echo "${stg_guiprotocol}:${stg_guiaddress}:${stg_guiport}"
		done
	)

	local proto=$(echo ${settings}|cut -f1 -d: -s|tr A-Z a-z)
	local addr=$(echo ${settings}|cut -f2 -d: -s)
	local port=$(echo ${settings}|cut -f3 -d: -s)

	: ${proto:="http"}
	: ${addr:="0.0.0.0"}

	if [ "${proto}" = "https" -a -z "${port}" ]
	then
		port="443"
	elif [ "${proto}" = "http" -a -z "${port}" ]
	then
		port="80"
	fi

	# XXX: IPv6
	if [ "${addr}" != "0.0.0.0" -a \
		-z "$(/sbin/ifconfig -a|grep -q ${addr})" ]; then
		addr="0.0.0.0"
	fi

	echo "${proto}:${addr}:${port}"
}


ix_nginx_start()
{
	local settings=$(get_nginx_settings)

	local proto=$(echo "${settings}"|cut -f1 -d:)
	local addr=$(echo "${settings}"|cut -f2 -d:)
	local port=$(echo "${settings}"|cut -f3 -d:)

	if [ "${proto}" = "https" -a ! -f "${SSLCONF}" ]
	then
		port="80"
		proto="http"

		set_stg_guiprotocol "${proto}"
		set_stg_guiport "${port}"
	fi

	generate_plugins_conf
	generate_fastcgi_params

	generate_nginx_conf "${proto}" "${addr}" "${port}"

}


name="ix-nginx"
start_cmd='ix_nginx_start'
stop_cmd=':'
            
load_rc_config $name
run_rc_command "$1"
