#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-samba
# REQUIRE: FILESYSTEMS mountlate
# REQUIRE: ix-pam
# BEFORE: smbd

. /etc/rc.freenas

: ${SMB_CONF:="/usr/local/etc/smb.conf"}
: ${LMHOSTS:="/usr/local/etc/lmhosts"}
AVAHI_SERVICES_DIR=/usr/local/etc/avahi/services
: ${AVAHI_CIFS_SERVICE:=$AVAHI_SERVICES_DIR/cifs.service}

is_within_zfs() {

	local mp share_dev
	share_dev=$(stat -f "%d" "$1")
	zfs list -H -o mountpoint | grep -v '^-' | while read mp; do
		if [ "${share_dev}" -eq "`stat -f "%d" "${mp}"`" ]; then
			echo "zfsacl"
			return 0
		fi
	done
	return 1

}

nt4_enabled()
{
	if dirsrv_enabled nt4 ; then
		echo 1
	else
		echo 0
	fi
}

activedirectory_enabled()
{
	if dirsrv_enabled activedirectory ; then
		echo 1
	else
		echo 0
	fi
}

nis_enabled()
{
	if dirsrv_enabled nis ; then
		echo 1
	else
		echo 0
	fi
}

ldap_enabled()
{
	if dirsrv_enabled ldap ; then
		echo 1
	else
		echo 0
	fi
}

generate_nt4_smbconf()
{
	local dcip="$(NT4_get dcip)"
	local nt4_netbiosname="$(NT4_get netbiosname)"
	local nt4_workgroup="$(NT4_get workgroup)"

	cat<<-__EOF__ >"${LMHOSTS}"
	${dcip}	${nt4_workgroup}
__EOF__
	
	cat<<-__EOF__
	    netbiosname = ${nt4_netbiosname}
	    workgroup = ${nt4_workgroup}

	    security = domain
	    #password server = ...
	    password server = *
	    winbind uid = 10000-20000
	    winbind gid = 10000-20000
	    winbind enum users = yes
	    winbind enum groups = yes
	    template shell = /bin/sh

	    local master = no
	    domain master = no
	    preferred master = no
__EOF__
}

generate_activedirectory_smbconf()
{
	local domain=$(echo "$(AD_get domainname)"|tr a-z A-Z)
	local ad_netbiosname="$(AD_get netbiosname)"
	local ad_workgroup="$(AD_get workgroup)"
	local trusted="no"
	local default="no"
	local homedir="/home/%D/%U"

	mkdir -p ${FREENAS_CACHEDIR}/.samba

	if [ "$(AD_get allow_trusted_doms)" = "1" ]
	then
		trusted="yes"
	fi
	if [ "$(AD_get use_default_domain)" = "1" ]
	then
		default="yes"
		homedir="/home/%U"
	fi

	cat<<-__EOF__
	    netbiosname = ${ad_netbiosname}
	    workgroup = ${ad_workgroup}

	    security = ADS
	    realm = ${domain}
	    client use spnego = yes
	    cache directory = ${FREENAS_CACHEDIR}/.samba

	    wins server = $(AD_get dchost)
	    password server = $(AD_get dchost)

	    local master = no
	    domain master = no
	    preferred master = no

	    inherit acls = yes
	    acl compatibility = auto
	    acl check permissions = true
	    acl map full control = true
	    dos filemode = yes

	    idmap uid = 10000-19999
	    idmap gid = 10000-19999

	    winbind cache time = 10
	    winbind offline logon = yes
	    winbind enum users = yes
	    winbind enum groups = yes
	    winbind nested groups = yes
	    winbind use default domain = ${default}
	    winbind refresh tickets = yes

	    allow trusted domains = ${trusted}

	    template shell = /bin/sh
	    template homedir = ${homedir}

__EOF__
	if [ "$(AD_get unix_extensions)" = "0" ]
	then
		cat<<-__EOF__
		    idmap config $(AD_get workgroup): backend = rid
		    idmap config $(AD_get workgroup): range = 20000-20000000
__EOF__
	fi
}

generate_nis_smbconf()
{
}

generate_ldap_smbconf()
{
	echo "    security = user"

	if [ -n "$(LDAP_get hostname)" ]; then
		echo "    passdb backend = ldapsam:ldap://$(LDAP_get hostname)"
	fi

	if [ -n "$(LDAP_get rootbasedn)" ]; then
	    echo "    ldap admin dn = $(LDAP_get rootbasedn)"
	fi

	if [ -n "$(LDAP_get rootbindpw)" ]; then
		/usr/local/bin/smbpasswd -w "$(LDAP_get rootbindpw)" >/dev/null 2>&1
	fi

	if [ -n "$(LDAP_get basedn)" ]; then
	    echo "    ldap suffix = $(LDAP_get basedn)"
	fi

	if [ -n "$(LDAP_get usersuffix)" ]; then
	    echo "    ldap user suffix = $(LDAP_get usersuffix)"
	fi

	if [ -n "$(LDAP_get groupsuffix)" ]; then
	    echo "    ldap group suffix = $(LDAP_get groupsuffix)"
	fi

	if [ -n "$(LDAP_get machinesuffix)" ]; then
	    echo "    ldap machine suffix = $(LDAP_get machinesuffix)"
	fi

	if [ "$(LDAP_get ssl)" = "start_tls" ]; then
		echo "    ldap ssl = start tls"
	else
		echo "    ldap ssl = off"
	fi

	cat<<-__EOF__
	    ldap replication sleep = 1000
	    ldap passwd sync = yes
	    #ldap debug level = 1
	    #ldap debug threshold = 1
	    ldapsam:trusted = yes
	    idmap uid = 10000-39999
	    idmap gid = 10000-39999
__EOF__
}

generate_smbconf()
{
	local IFS=\|

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		cifs_srv_authmodel,
		cifs_srv_netbiosname,
		cifs_srv_workgroup,
		cifs_srv_description,
		cifs_srv_doscharset,
		cifs_srv_unixcharset,
		cifs_srv_loglevel,
		cifs_srv_localmaster,
		cifs_srv_timeserver,
		cifs_srv_guest,
		cifs_srv_filemask,
		cifs_srv_dirmask,
		cifs_srv_largerw,
		cifs_srv_sendfile,
		cifs_srv_easupport,
		cifs_srv_dosattr,
		cifs_srv_nullpw,
		cifs_srv_unixext,
		cifs_srv_aio_enable,
		cifs_srv_aio_rs,
		cifs_srv_aio_ws,
		cifs_srv_hostlookup,
		cifs_srv_homedir_enable,
		cifs_srv_homedir_browseable_enable,
		cifs_srv_homedir

	FROM
		services_cifs

	ORDER BY
		-services_cifs.id

	LIMIT 1
	" | \
	while read -r authmodel netbiosname workgroup cifs_description doscharset \
		unixcharset loglevel localmaster timeserver guest \
		cifs_filemask cifs_dirmask \
		largerw sendfile easupport dosattr nullpw unixext \
		cifs_aio_enable cifs_aio_rs cifs_aio_ws cifs_hostlookup cifs_homedir \
		cifs_homedir_browseable cifs_homedir_mp ;
	do
		nt4_enable="$(nt4_enabled)"
		if [ "${nt4_enable}" = "1" ]
		then
			NT4_init
		fi

		ad_enable="$(activedirectory_enabled)"
		if [ "${ad_enable}" = "1" ] 
		then
			AD_init
		fi

		nis_enable="$(nis_enabled)"
		if [ "${nis_enable}" = "1" ]
		then
			NIS_init
		fi

		ldap_enable="$(ldap_enabled)"
		if [ "${ldap_enable}" = "1" ]
		then
			LDAP_init
		fi
		
		# Default user and group is ftp:ftp
		if [ -z "${guest}" ]; then
			guest=ftp
		fi

		cat<<-EOF
		[global]
		    encrypt passwords = yes
		    dns proxy = no
		    strict locking = no
		    read raw = yes
		    write raw = yes
		    oplocks = yes
		    max xmit = 65535
		    deadtime = 15
		    display charset = LOCALE
		    max log size = 10
		    syslog only = yes
		    syslog = 1
		    load printers = no
		    printing = bsd
		    printcap name = /dev/null
		    disable spoolss = yes
		    smb passwd file = /var/etc/private/smbpasswd
		    private dir = /var/etc/private
		    getwd cache = yes
		    guest account = ${guest}
		    map to guest = Bad Password
		    obey pam restrictions = Yes
		    # NOTE: read smb.conf.
		    directory name cache size = 0
		    max protocol = SMB2
EOF

		if [ "${ad_enable}" = "1" ]; then
			netbiosname="$(AD_get netbiosname)"
			workgroup="$(AD_get workgroup)"

		elif [ "${nt4_enable}" = "1" ]; then
			netbiosname="$(NT4_get netbiosname)"
			workgroup="$(NT4_get workgroup)"
		fi

		echo "    netbios name = ${netbiosname}"
		echo "    workgroup = ${workgroup}"
		
		if [ -n "${cifs_description}" ]; then
			echo "    server string = ${cifs_description}"
		fi

		if [ "${sendfile}" = "1" ]; then
			echo "    use sendfile = yes"
		fi

		if [ "${largerw}" = "0" ]; then
			echo "    large readwrite = no"
		fi

		if [ "${easupport}" = "1" ]; then
			echo "    ea support = yes"
		fi

		if [ "${dosattr}" = "1" ]; then
			echo "    store dos attributes = yes"
		fi

		if [ "${cifs_hostlookup}" = "1" ]; then
			echo "    hostname lookups = yes"
		fi

		#Default is yes
		if [ "${unixext}" = "0" ]; then
			echo "    unix extensions = no"
		fi

		if [ "${localmaster}" = "1" \
			-a "${ad_enable}" !=  "1" -a "${nt4_enable}" = "1" ]; then
			echo "    local master = yes"
		fi

		if [ "${timeserver}" = "1" ]; then
			echo "    time server = yes"
		fi

		if [ "${nullpw}" = "1" ]; then
			echo "    null passwords = yes"
		fi

		if [ "${ldap_enable}" = "1" ]; then
			generate_ldap_smbconf

		elif [ "${nis_enable}" = "1" ]; then
			generate_nis_smbconf

		elif [ "${nt4_enable}" = "1" ]; then
			generate_nt4_smbconf

		elif [ "${ad_enable}" = "1" ]; then
			generate_activedirectory_smbconf

		else
			echo "    security = ${authmodel}"
			if [ "${authmodel}" = "share" ]; then
				cat<<-EOF
			    force user = ${guest}
			    force group = ${guest}
			    passdb backend = tdbsam:/var/etc/private/passdb.tdb
EOF
			fi
		fi

		if [ -z "${cifs_filemask}" ]; then
			cifs_filemask=0666
		fi

		if [ -z "${cifs_dirmask}" ]; then
			cifs_dirmask=0777
		fi

		echo "    create mask = ${cifs_filemask}"
		echo "    directory mask = ${cifs_dirmask}"
		echo "    client ntlmv2 auth = yes"

		if [ -n "${doscharset}" ]; then
			echo "    dos charset = ${doscharset}"
		fi

		if [ -n "${unixcharset}" ]; then
			echo "    unix charset = ${unixcharset}"
		fi

		if [ -n "${loglevel}" -a "${loglevel}" != "True" ]; then
			echo "    log level = ${loglevel}"
		fi

		if [ "${cifs_aio_enable}" = "1" ]; then
			echo "    aio read size = ${cifs_aio_rs}"
			echo "    aio write size = ${cifs_aio_ws}"
		fi

	    ${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	    SELECT
	    	cifs_srv_smb_options
	    FROM
	    	services_cifs
	    ORDER BY
	    	-id
	    LIMIT 1
	    "

		if [ "${cifs_homedir}" = "1" ]; then

			if [ "${ad_enable}" = "1" -a "$(AD_get use_default_domain)" = "1" ]
			then
				valid_users_path="%U"
				valid_users="%U"

			elif [ "${ad_enable}" = "1" ]
			then
				valid_users_path="%D/%U"
				valid_users="%D\%U"

			else
				valid_users_path="%U"
				valid_users="%U"
			fi
			cifs_homedir_path="$cifs_homedir_mp/$valid_users_path"

			cat<<-EOF
			[homes]
			    comment = Home Directories
			    valid users = ${valid_users}
			    writable = yes
EOF
                        if [ "${cifs_homedir_browseable}" = "1" ]; then
                                echo "    browseable = yes"
                        else
                                echo "    browseable = no"
                        fi
                        if [ "${cifs_homedir_mp}" != "" ]; then
                                echo "    path = ${cifs_homedir_path}"
                        fi

		    ${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
		    SELECT
		    	cifs_srv_homedir_aux
		    FROM
		    	services_cifs
		    ORDER BY
		    	-id
		    LIMIT 1
		    "
		fi
	done

	echo
}

generate_exports()
{
	local IFS="|"

	local vfs_objects

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		cifs_name,
		cifs_comment,
		cifs_path,
		cifs_ro,
		cifs_browsable,
		cifs_inheritowner,
		cifs_inheritperms,
		cifs_recyclebin,
		cifs_showhiddenfiles,
		cifs_guestok,
		cifs_guestonly,
		cifs_hostsallow,
		cifs_hostsdeny
	FROM
		sharing_cifs_share AS cs

	ORDER BY
		cs.id ASC
	" | \
	while read -r name comment mountpoint cifsro browsable inheritowner inheritperms \
		recyclebin showhiddenfiles guestok guestonly hostsallow hostsdeny;
	do
		if [ -d "${mountpoint}" ]; then

			vfs_objects=
			fs=$(zfs list -H -o mountpoint,name|grep -E "${mountpoint}	"|awk '{print $2}')
			if [ -n "${fs}" ]; then
				task_rint=`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT task_ret_count FROM storage_task WHERE task_filesystem='${fs}' LIMIT 1;"`
				task_runit=`${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT task_ret_unit FROM storage_task WHERE task_filesystem=\"${fs}\" LIMIT 1;" | /usr/bin/cut -c1`
			fi

			echo "[${name}]"
			echo "    path = ${mountpoint}"
			echo "    printable = no"
			echo "    veto files = /.snap/.windows/.zfs/"
			if [ -n "${comment}" ]; then
				echo "    comment = ${comment}"
			fi
			if [ "${cifsro}" = "0" ]; then
				echo "    writeable = yes"
			else
				echo "    writeable = no"
			fi
			if [ "${browsable}" = "0" ]; then
				echo "    browseable = no"
			else
				echo "    browseable = yes"
			fi

			if [ "${inheritowner}" = "1" ]; then
				echo "    inherit owner = yes"
			else
				echo "    inherit owner = no"
			fi

			#
			#    This should always be set to "yes" if permission changes
			#    on windows are desired.
			#
			if [ "${inheritperms}" = "1" ]; then
				echo "    inherit permissions = yes"
			else
				echo "    inherit permissions = no"
			fi

			zfsacl=$(is_within_zfs "${mountpoint}")
			if [ "${recyclebin}" = "1" ]; then
				vfs_objects="$vfs_objects recycle"
			cat<<-EOF
			    recycle:repository = .recycle/%U
			    recycle:keeptree = yes
			    recycle:versions = yes
			    recycle:touch = yes
			    recycle:directory_mode = 0777
			    recycle:subdir_mode = 0700
EOF
			fi
			if [ -n "${task_rint}" ]; then
				vfs_objects="$vfs_objects shadow_copy2"
			cat <<-EOF
			    shadow: snapdir = .zfs/snapshot
			    shadow: sort = desc
			    shadow: localtime = yes
			    shadow: format = auto-%Y%m%d.%H%M-${task_rint}${task_runit}
EOF
			fi

			# Order matters. shadow_copy2 must be enabled before
			# zfsacl, otherwise zfsacl will prevent shadow_copy2
			# from working because of permissions issues.
			vfs_objects="$vfs_objects $zfsacl"

			if [ -n "$vfs_objects" ]
			then
				echo "    vfs objects = $vfs_objects"
			fi
			if [ "${showhiddenfiles}" = "1" ]; then
				echo "    hide dot files = no"
			fi
			if [ -n "${hostsallow}" ]; then
				echo "    hosts allow = ${hostsallow}"
			fi
			if [ -n "${hostsdeny}" ]; then
				echo "    hosts deny = ${hostsdeny}"
			fi
			if [ "${guestok}" = "1" ]; then
				echo "    guest ok = yes"
			else
				echo "    guest ok = no"
			fi
			if [ "${guestonly}" = "1" ]; then
				echo "    guest only = yes"
			fi
			cat<<-EOF
			    inherit acls = Yes
			    map archive = No
			    map readonly = no
			    nfs4:mode = special
			    nfs4:acedup = merge
			    nfs4:chown = yes
EOF

			${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT cifs_auxsmbconf FROM sharing_cifs_share WHERE cifs_name=\"${name}\" ORDER BY -id LIMIT 1"
			echo
		fi
	done
}

generate_smb_tdb()
{
	local tmp
	tmp=$(mktemp /tmp/tmp.XXXXXX)
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT bsdusr_smbhash FROM account_bsdusers WHERE bsdusr_smbhash LIKE '%:%:XXXX%' AND bsdusr_locked = 0 AND bsdusr_password_disabled = 0" > $tmp
	rm -f /var/etc/private/passdb.tdb
	/usr/local/bin/pdbedit -d 0 -i smbpasswd:$tmp \
	    -e tdbsam:/var/etc/private/passdb.tdb >/dev/null
	rm -f $tmp
}

generate_avahi_cifs_service()
{
	local samba_enabled

	srv_enabled cifs && \
	    [ "x$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT cifs_srv_zeroconf FROM services_cifs")" = x1 ]
	if [ $? -eq 0 ]; then
		cat > ${AVAHI_CIFS_SERVICE} <<EOF
<?xml version="1.0" standalone="no"?>
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
  <name replace-wildcards="yes">CIFS Shares on %h</name>
  <service>
      <type>_smb._tcp</type>
      <port>445</port>
  </service>
  <service>
      <type>_device-info._tcp</type>
      <port>0</port>
    <txt-record>model=Xserve</txt-record>
  </service>
</service-group>
EOF
	else
		rm -f ${AVAHI_CIFS_SERVICE}
	fi
}

generate_smb_config()
{
	mkdir -p /var/etc/private
	chmod 700 /var/etc/private
	generate_smb_tdb
	generate_smbconf > ${SMB_CONF}
	generate_exports >> ${SMB_CONF}
	generate_avahi_cifs_service

	if dirsrv_enabled activedirectory
	then
		AD_init
		AD_log "generate_smb_config: checking testparm issues"

		local IFS="
"
		for line in $(echo|/usr/local/bin/testparm 2>/dev/stdout 1>/dev/null)
		do
			AD_log "generate_smb_config: testparm: ${line}"
		done
	fi
}

name="ix-samba"
start_cmd='generate_smb_config'
stop_cmd=':'

load_rc_config $name
run_rc_command "$1"
