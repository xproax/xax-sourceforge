#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-samba
# REQUIRE: FILESYSTEMS ix-ldap ix-nsswitch ix-pam
# BEFORE: smbd

. /etc/rc.subr

: ${SMB_CONF:="/usr/local/etc/smb.conf"}

generate_smbconf()
{
	local IFS=\|

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		cifs_srv_authmodel,
		cifs_srv_netbiosname,
		cifs_srv_workgroup,
		cifs_srv_description,
		cifs_srv_doscharset,
		cifs_srv_unixcharset,
		cifs_srv_loglevel,
		cifs_srv_localmaster,
		cifs_srv_timeserver,
		cifs_srv_guest,
		cifs_srv_guestok,
		cifs_srv_guestonly,
		cifs_srv_filemask,
		cifs_srv_dirmask,
		cifs_srv_largerw,
		cifs_srv_sendfile,
		cifs_srv_easupport,
		cifs_srv_dosattr,
		cifs_srv_nullpw,
		cifs_srv_aio_enable,
		cifs_srv_aio_rs,
		cifs_srv_aio_ws,
		cifs_srv_homedir_enable,
		(
			SELECT
				srv_enable
			FROM
				services_services
			WHERE
				srv_service = 'activedirectory'
			ORDER BY
				-id
			LIMIT 1
		) as cifs_srv_ad_enable,
		(
			SELECT
				srv_enable
			FROM
				services_services
			WHERE
				srv_service = 'ldap'
			ORDER BY
				-id
			LIMIT 1
		) as cifs_srv_ldap_enable,
		ad_dcname,
		ad_domainname,
		ad_netbiosname,
		ad_workgroup,
		ad_adminname,
		ad_adminpw,
		ldap_hostname,
		ldap_basedn,
		ldap_anonbind,
		ldap_rootbasedn,
		ldap_rootbindpw,
		ldap_pwencryption,
		ldap_ssl,
		ldap_usersuffix,
		ldap_groupsuffix,
		ldap_passwordsuffix,
		ldap_machinesuffix

	FROM
		services_cifs

	JOIN services_ldap ON (1 = 1)
	JOIN services_activedirectory ON (1 = 1 )

	ORDER BY
		-services_cifs.id,
		-services_ldap.id,
		-services_activedirectory.id

	LIMIT 1
	" | \
	while read authmodel netbiosname workgroup cifs_description doscharset \
		unixcharset loglevel localmaster timeserver guest guestok guestonly \
		cifs_filemask cifs_dirmask \
		largerw sendfile easupport dosattr nullpw \
		cifs_aio_enable cifs_aio_rs cifs_aio_ws cifs_homedir \
		ad_enable ldap_enable ad_dcname ad_domainname \
		ad_netbiosname ad_workgroup ad_adminname ad_adminpw \
		ldap_hostname ldap_basedn ldap_anonbind ldap_rootbasedn \
		ldap_rootbindpw ldap_pwencryption ldap_ssl ldap_usersuffix \
		ldap_groupsuffix ldap_passwordsuffix ldap_machinesuffix;
	do
		# Default user and group is ftp:ftp
		if [ -z "${guest}" ]; then
			guest=ftp
		fi

		cat<<-EOF
		[global]
		    encrypt passwords = yes
		    dns proxy = no
		    strict locking = no
		    read raw = yes
		    write raw = yes
		    oplocks = yes
		    max xmit = 65535
		    deadtime = 15
		    display charset = LOCALE
		    max log size = 10
		    syslog only = yes
		    syslog = yes
		    load printers = no
		    printing = bsd
		    printcap name = /dev/null
		    disable spoolss = yes
		    smb passwd file = /var/etc/private/smbpasswd
		    private dir = /var/etc/private
		    getwd cache = yes
		    guest account = ${guest}
EOF
		if [ "${guestok}" = "1" ]; then
			echo "    guest ok = yes"
		fi
		if [ "${guestonly}" = "1" ]; then
			echo "    guest only = yes"
		fi

		if [ "${ad_enable}" = "0" ]; then
			echo "    netbios name = ${netbiosname}"
			echo "    workgroup = ${workgroup}"
		fi

		if [ -n "${cifs_description}" ]; then
			echo "    server string = ${cifs_description}"
		fi

		if [ "${sendfile}" = "1" ]; then
			echo "    use sendfile = yes"
		fi

		if [ "${largerw}" = "0" ]; then
			echo "    large readwrite = no"
		fi

		if [ "${easupport}" = "1" ]; then
			echo "    ea support = yes"
		fi

		if [ "${dosattr}" = "1" ]; then
			echo "    store dos attributes = yes"
		fi

		if [ "${localmaster}" = "1" -a "${ad_enable}" !=  "1" ]; then
			echo "    local master = yes"
		fi

		if [ "${timeserver}" = "1" ]; then
			echo "    time server = yes"
		fi

		if [ "${nullpw}" = "1" ]; then
			echo "    null passwords = yes"
		fi

		if [ "${ldap_enable}" = "1" ]; then
			echo "    security = user"

		elif [ "${ad_enable}" = "1" ]; then
			local domain=$(echo "${ad_domainname}"|tr a-z A-Z)
			local ad_workgroup="${ad_workgroup}"

			# wins server ?
			# domain master ?
			# preferred master ?

			# idmap settings?
			# winbind settings?
			# template??
			# admin users??
			# valid users??
			# acls?

			cat<<-EOF
			    security = ADS
			    realm = ${domain}
			    workgroup = ${ad_workgroup}	
			    netbios name = ${ad_netbiosname}
			    client use spnego = yes
			    
			    wins server = ${ad_dcname}.${ad_domainname}
			    password server = ${ad_dcname}.${ad_domainname}
			    
			    local master = no
			    domain master = no
			    preferred master = no
		
			    inherit acls = yes
			    acl compatibility = auto
			    acl check permissions = true
			    acl map full control = true
			    dos filemode = yes

			    idmap uid = 10000-20000000
			    idmap gid = 10000-20000000

			    winbind separator = +
			    winbind cache time = 10
			    winbind offline logon = yes
			    winbind enum users = yes
			    winbind enum groups = yes
			    winbind nested groups = yes
			    winbind separator = -
			    winbind use default domain = yes
			    winbind refresh tickets = yes
			    allow trusted domains = no

			    template shell = /bin/sh
			    template homedir = /home/%U

EOF
		else
			echo "    security = ${authmodel}"
			if [ "${authmodel}" = "share" ]; then
				cat<<-EOF
			    force user = ${guest}
			    force group = ${guest}
			    passdb backend = tdbsam:/var/etc/private/passdb.tdb
EOF
			fi
		fi

		if [ -z "${cifs_filemask}" ]; then
			cifs_filemask=0666
		fi

		echo "    create mask = ${cifs_filemask}"

		if [ -z "${cifs_dirmask}" ]; then
			cifs_dirmask=0777
		fi

		echo "    create mask = ${cifs_filemask}"
		echo "    directory mask = ${cifs_dirmask}"

		if [ -n "${doscharset}" ]; then
			echo "    dos charset = ${doscharset}"
		fi

		if [ -n "${unixcharset}" ]; then
			echo "    unix charset = ${unixcharset}"
		fi

		if [ -n "${loglevel}" ]; then
			echo "    log level = ${loglevel}"
		fi

		if [ "${cifs_aio_enable}" = "1" ]; then
			echo "    aio read size = ${cifs_aio_rs}"
			echo "    aio write size = ${cifs_aio_ws}"
		fi

		if [ "${cifs_homedir}" = "1" ]; then
			cat<<-EOF
			[homes]
			    comment = Home Directories
			    browseable = yes
			    valid users = %S
			    writable = yes
EOF
		fi

		# XXX TODO XXX
		if [ "${ad_enable}" = "1" ]; then
			:
		fi

		if [ "${ldap_enable}" = "1" ]; then
			if [ -n "${ldap_hostname}" ]; then
				echo "    passdb backend = ldapsam:ldap://${ldap_hostname}"
			fi

			if [ -n "${ldap_rootbasedn}" ]; then
			    echo "    ldap admin dn = ${ldap_rootbasedn}"
			fi

			if [ -n "${ldap_rootbindpw}" ]; then
				mount -u /
				/usr/local/bin/smbpasswd -w "${ldap_rootbindpw}" >/dev/null 2>&1
				mount -ur /
			fi

			if [ -n "${ldap_basedn}" ]; then
			    echo "    ldap suffix = ${ldap_basedn}"
			fi

			if [ -n "${ldap_usersuffix}" ]; then
			    echo "    ldap user suffix = ${ldap_usersuffix}"
			fi

			if [ -n "${ldap_groupsuffix}" ]; then
			    echo "    ldap group suffix = ${ldap_groupsuffix}"
			fi

			if [ -n "${ldap_machinesuffix}" ]; then
			    echo "    ldap machine suffix = ${ldap_machinesuffix}"
			fi

			if [ "${ldap_ssl}" = "start_tls" ]; then
				echo "    ldap ssl = start tls"
			else
				echo "    ldap ssl = off"
			fi

			cat<<-EOF
			    ldap replication sleep = 1000
			    ldap passwd sync = yes
			    #ldap debug level = 1
			    #ldap debug threshold = 1
			    ldapsam:trusted = yes
			    idmap uid = 10000-39999
			    idmap gid = 10000-39999
EOF
		fi

	done

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		cifs_srv_smb_options
	FROM
		services_cifs
	ORDER BY
		-id
	LIMIT 1
	"
	echo
}

generate_exports()
{
	local IFS=\|

	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		cifs_name,
		cifs_comment,
		mp_path,
		cifs_ro,
		cifs_browsable,
		cifs_inheritperms,
		cifs_recyclebin,
		cifs_showhiddenfiles,
		cifs_guest,
		cifs_guestok,
		cifs_guestonly,
		cifs_hostsallow,
		cifs_hostsdeny,
		cifs_auxsmbconf
	FROM
		sharing_cifs_share AS cs

	LEFT OUTER JOIN
		storage_mountpoint AS mp
	ON cs.cifs_path_id = mp.id

	ORDER BY
		cs.id ASC
	" | \
	while read name comment mountpoint cifsro browsable inheritperms \
		recyclebin showhiddenfiles guest guestok guestonly hostsallow hostsdeny auxsmbconf;
	do
		echo "[${name}]"
		echo "path = ${mountpoint}"
		echo "printable = no"
		echo "veto files = /.snap/"
		if [ -n "${comment}" ]; then
			echo "comment = ${comment}"
		fi
		if [ "${cifsro}" = "0" ]; then
			echo "writeable = yes"
		else
			echo "writeable = no"
		fi
		if [ "${browsable}" = "0" ]; then
			echo "browseable = no"
		else
			echo "browseable = yes"
		fi
		if [ "${inheritperms}" = "1" ]; then
			echo "inherit permissions = yes"
		else
			echo "inherit permissions = no"
		fi
		if [ "${recyclebin}" = "1" ]; then
			echo "vfs objects = recycle"
			echo "recycle:repository = .recycle/%U"
			echo "recycle:keeptree = yes"
			echo "recycle:versions = yes"
			echo "recycle:touch = yes"
			echo "recycle:directory_mode = 0777"
			echo "recycle:subdir_mode = 0700"
		fi
		if [ "${showhiddenfiles}" = "1" ]; then
			echo "hide dot files = no"
		fi
		if [ -n "${hostsallow}" ]; then
			echo "hosts allow = ${hostsallow}"
		fi
		if [ -n "${hostsdeny}" ]; then
			echo "hosts deny = ${hostsdeny}"
		fi
		if [ "${guestok}" = "1" -o "${guestonly}" = "1" ]; then
			echo "guest account = ${guest}"
		fi
		if [ "${guestok}" = "1" ]; then
			echo "guest ok = yes"
		fi
		if [ "${guestonly}" = "1" ]; then
			echo "guest only = yes"
		fi
		if [ -n "${auxsmbconf}" ]; then
			echo ${auxsmbconf}
		fi
	done
	echo
}

generate_smb_tdb()
{
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "SELECT bsdusr_smbhash FROM account_bsdusers WHERE bsdusr_smbhash LIKE '%:%:XXXX%'" > /tmp/smbpasswd
	rm -f /var/etc/private/passdb.tdb
	/usr/local/bin/pdbedit -i smbpasswd:/tmp/smbpasswd -e tdbsam:/var/etc/private/passdb.tdb
	rm -f /tmp/smbpasswd
}

generate_smb_config()
{
	mkdir -p /var/etc/private
	chmod 700 /var/etc/private
	generate_smb_tdb
	generate_smbconf > ${SMB_CONF}
	generate_exports >> ${SMB_CONF}
}

name="ix-samba"
start_cmd='generate_smb_config'
stop_cmd=':'

load_rc_config $name
run_rc_command "$1"
