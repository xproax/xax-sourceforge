#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-ssl
# REQUIRE: FILESYSTEMS
# BEFORE: ix-nginx

. /etc/rc.freenas

generate_openssl_conf()
{
	local IFS="|"
	local f="ssl_org ssl_unit ssl_email ssl_city ssl_state ssl_country ssl_common"
	eval local $f
	local sf=$(var_to_sf $f)

	eval read $f <<-__SSL__
	$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		$sf
	FROM
		system_ssl

	ORDER BY
		-id

	LIMIT 1
	")
__SSL__
	IFS="${_IFS}"

	mkdir -p "${SSLDIR}"
	mkdir -p "${SSLCADIR}"
	mkdir -p "${SSLCACERTDIR}"
	mkdir -p "${SSLCAPRIVDIR}"

	if [ ! -f "${SSLCADIR}/index.txt" ]
	then
		touch "${SSLCADIR}/index.txt"
	fi

	if [ ! -f "${SSLCADIR}/serial" ]
	then
		echo 01 > "${SSLCADIR}/serial"
	fi

	if [ -z "${ssl_org}" ]
	then
		ssl_org="iXsystems, Inc."
	fi
	if [ -z "${ssl_unit}" ]
	then		
		ssl_unit="Systems"
	fi
	if [ -z "${ssl_email}" ]
	then
		ssl_email="root@localhost"
	fi
	if [ -z "${ssl_city}" ]
	then
		ssl_city="San Jose"
	fi
	if [ -z "${ssl_state}" ]
	then
		ssl_state="California"
	fi
	if [ -z "${ssl_country}" ]
	then
		ssl_country="US"
	else
		ssl_country=$(echo "${ssl_country}"|sed -E 's|^(..).+|\1|')
	fi
	if [ -z "${ssl_common}" ]
	then
		ssl_common="localhost"
	fi

	cat<<-__EOF__>"${SSLCONF}"
	RANDFILE                        = ${SSLCADIR}/private/.rand

	[ ca ]
	default_ca                      = CA_default

	[ CA_default ]
	dir                             = ${SSLCADIR}
	serial                          = ${SSLCADIR}/serial
	database                        = ${SSLCADIR}/index.txt
	new_certs_dir                   = ${SSLCACERTDIR}
	certificate                     = ${SSLCACERT}
	private_key                     = ${SSLCAKEY}
	default_days                    = 3650
	default_md                      = md5
	preserve                        = no
	email_in_dn                     = no
	nameopt                         = default_ca
	certopt                         = default_ca
	policy                          = policy_match
	x509_extensions                 = v3_ca

	[ policy_match ]
	countryName                     = match
	stateOrProvinceName             = match
	organizationName                = match
	organizationalUnitName          = optional
	commonName                      = supplied
	emailAddress                    = optional

	[ req ]
	default_bits                    = 1024
	default_keyfile                 = key.pem
	default_md                      = md5
	string_mask                     = nombstr
	distinguished_name              = req_distinguished_name
	req_extensions                  = v3_req
	prompt                          = no

	[ req_distinguished_name ]
	0.organizationName              = ${ssl_org}
	organizationalUnitName          = ${ssl_unit}
	emailAddress                    = ${ssl_email}
	localityName                    = ${ssl_city}
	stateOrProvinceName             = ${ssl_state}
	countryName                     = ${ssl_country}
	commonName                      = ${ssl_common}

	[ v3_ca ]
	basicConstraints                = CA:TRUE
	subjectKeyIdentifier            = hash
	authorityKeyIdentifier          = keyid:always,issuer:always

	[ v3_req ]
	basicConstraints                = CA:FALSE
	subjectKeyIdentifier            = hash
__EOF__
}

create_CA()
{
	local key="${1}"
	local crt="${2}"

	: ${key:="${SSLCAKEY}"}
	: ${crt:="${SSLCACERT}"}

	if [ -f "${key}" -a -f "${crt}" ]
	then
		return
	fi

	local tmp=$(mktemp /tmp/tmp.XXXXXX)
	dd if=/dev/urandom count=16 bs=1 | uuencode -|head -2 | \
	    tail -1 > "${tmp}"
	${OPENSSL} req -config "${SSLCONF}" -batch -passout file:"${tmp}" \
	    -new -x509 -keyout "${key}" -out "${crt}"

	cp "${key}" "${key}.orig"
	${OPENSSL} rsa -passin file:"${tmp}" -in "${key}.orig" \
	    -out "${key}"
	rm -f "${tmp}" "${key}.orig"
	chmod 400 "${key}"
}

import_certificate()
{
	local certpath="${1}"
	local certfile
	local id

	if [ ! -f "${certpath}" ]
	then
		return 1
	fi

	certfile=$(cat "${certpath}")
	if [ -z "${certfile}" ]
	then
		return 1
	fi

	id=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		id
	FROM
		system_ssl
	ORDER BY
		-id
	LIMIT 1
	")

	if [ -n "${id}" ]
	then
		${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
		UPDATE
			system_ssl
		SET
			ssl_certfile = '${certfile}'
		WHERE
			id = ${id}
		"
	else
		${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
		INSERT INTO 
			system_ssl (ssl_certfile)
		VALUES ('${certfile}')
		"
	fi

	return $?
}

write_key()
{
	local infile="${1}"
	local outfile="${2}"

	if [ -z "${infile}" -o -z "${outfile}" -o ! -f "${infile}" ]
	then
		return 1
	fi

	awk -v key="${outfile}" '
	BEGIN {
		inkeyfile = 0
		keyfile[0] = null;
		keyfile_size = 0;
	}
	/-----BEGIN RSA PRIVATE KEY-----/ {
		inkeyfile = 1;
	}

	/-----END RSA PRIVATE KEY-----/ {
		keyfile[keyfile_size++] = $0;
		inkeyfile = 0;
	}
	/.+/ {
		if (inkeyfile)
			keyfile[keyfile_size++] = $0;
	}
	END {
		for (i = 0;i < keyfile_size;i++)
			print keyfile[i] > key
	}
	' < "${infile}"

	return 0
}

write_cert()
{
	local infile="${1}"
	local outfile="${2}"

	if [ -z "${infile}" -o -z "${outfile}" -o ! -f "${infile}" ]
	then
		return 1
	fi

	awk -v cert="${outfile}" '
	BEGIN {
		incertfile = 0
		certfile[0] = null;
		certfile_size = 0;
	}
	/-----BEGIN CERTIFICATE-----/ {
		incertfile = 1;
	}
	
	/-----END CERTIFICATE-----/ {
		certfile[certfile_size++] = $0;
		incertfile = 0;
	}
	/.+/ {
		if (incertfile)
			certfile[certfile_size++] = $0;
	}
	END {
		for (i = 0;i < certfile_size;i++)
			print certfile[i] > cert
	}
	' < "${infile}"

	return 0
}

generate_system_certificate()
{
	if ! [ -f "${SSLCAKEY}" -o -f "${SSLCACERT}" ]
	then
		create_CA "${SSLCAKEY}" "${SSLCACERT}"
	fi
}


create_CSR()
{
	local outfile="${1}"

	if [ -z "${outfile}" ]
	then
		return 1
	fi

	${OPENSSL} req -config ${SSLCONF} -batch -new -nodes -out "${outfile}"
	return $?
}

sign_CSR()
{
	local infile="${1}"
	local outfile="${2}"

	if [ -z "${infile}" -o -z "${outfile}" ]
	then
		return 1
	fi

	${OPENSSL} ca -config ${SSLCONF} -batch -out "${outfile}" -infiles "${infile}"
	return $?
}

verify_CA()
{
	local infile="${1}"

	if [ -z "${infile}" ]
	then
		return 1
	fi

	${OPENSSL} x509 -in "${infile}" -noout -text -dates -purpose
	return $?
}

verify_CSR()
{
	local infile="${1}"

	if [ -z "${infile}" ]
	then
		return 1
	fi

	${OPENSSL} req -in "${infile}" -text -verify -noout 
	return $?
}

verify_signature()
{
	local infile="${1}"

	if [ -z "${infile}" ]
	then
		return 1
	fi

	${OPENSSL} x509 -in "${infile}" -noout -text -dates -purpose
	return $?
}

configure_nginx_ssl()
{
	local new_cert tmp

	tmp=$(mktemp /tmp/tmp.XXXXXX)
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ssl_certfile

	FROM
		system_ssl

	ORDER BY
		-id

	LIMIT 1
	" > "${tmp}"

	mkdir -p "${HTTPDSSLDIR}"
	size=$(wc -c "${tmp}" | awk '{ print $1 }')
	if [ ${size} -gt 1 ]
	then
		local tmpkey="$(mktemp /tmp/tmp.XXXXXX)"
		local tmpcrt="$(mktemp /tmp/tmp.XXXXXX)"

		write_key "${tmp}" "${tmpkey}"
		write_cert "${tmp}" "${tmpcrt}"

		diff -Nq "${tmpkey}" "${HTTPDKEY}" >/dev/null
		local rc1=$?

		diff -Nq "${tmpcrt}" "${HTTPCVERT}" >/dev/null
		local rc2=$?

		if [ "${rc1}" != "0" -a "${rc2}" != "0" ]
		then
			mv "${tmpkey}" "${HTTPDKEY}"
			mv "${tmpcrt}" "${HTTPDCERT}"
			new_cert=true
		else
			rm -f "${tmpkey}" "${tmpcrt}"
		fi

	else
		rm -f "${HTTPDKEY}" "${HTTPDCERT}"
		new_cert=true
	fi

	if ! [ -f "${HTTPDKEY}" -a -f "${HTTPDCERT}" ]
	then
		create_CA "${HTTPDKEY}" "${HTTPDCERT}"
		new_cert=true
	fi

	if [ -s "${HTTPDKEY}" -a -s "${HTTPDCERT}" ]
	then
		if [ ! -z "${new_cert}" ]
		then
			local cert=$(mktemp /tmp/tmp.XXXXXX)
			cat "${HTTPDKEY}" "${HTTPDCERT}" > "${cert}"
			import_certificate "${cert}"
			rm -f "${cert}"
		fi
	else
		echo "${HTTPDKEY} and/or ${HTTPDCERT} does not exist."
	fi

	rm -f "${tmp}"
}

do_openssl_config()
{
	generate_openssl_conf
	generate_system_certificate

	for arg in ${ixssl_list}
	do
		func="configure_${arg}_ssl"
		if $(type "${func}" 2>/dev/null|grep -q 'shell function')
		then
			eval ${func}
		fi
	done	
}

name="ix-ssl"
start_cmd='do_openssl_config'
stop_cmd=':'

load_rc_config $name
cmd="${1}"
if [ $# -gt 0 ]
then
	shift
fi
if [ -n "$*" ]
then
	ixssl_list="$*"
fi
run_rc_command "${cmd}"
