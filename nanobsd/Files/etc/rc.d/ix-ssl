#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-ssl
# REQUIRE: FILESYSTEMS
# BEFORE: ix-httpd

. /etc/rc.freenas

generate_openssl_conf()
{
	local IFS="|"
	local f="ssl_org ssl_unit ssl_email ssl_city ssl_state ssl_country ssl_common"
	eval local $f
	local sf=$(var_to_sf $f)

	read $f <<-__SSL__
	$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		$f
	FROM
		system_ssl

	ORDER BY
		-id

	LIMIT 1
	")
__SSL__
	IFS="${_IFS}"

	mkdir -p "${SSLDIR}"
	mkdir -p "${SSLCADIR}"
	mkdir -p "${SSLCACERTDIR}"
	mkdir -p "${SSLCAPRIVDIR}"

	if [ ! -f "${SSLCADIR}/index.txt" ]
	then
		touch "${SSLCADIR}/index.txt"
	fi

	if [ ! -f "${SSLCADIR}/serial" ]
	then
		echo 01 > "${SSLCADIR}/serial"
	fi

	if [ -z "${ssl_org}" ]
	then
		ssl_org="iXsystems, Inc."
	fi
	if [ -z "${ssl_unit}" ]
	then		
		ssl_unit="Systems"
	fi
	if [ -z "${ssl_email}" ]
	then
		ssl_email="root@localhost"
	fi
	if [ -z "${ssl_city}" ]
	then
		ssl_city="San Jose"
	fi
	if [ -z "${ssl_state}" ]
	then
		ssl_state="California"
	fi
	if [ -z "${ssl_country}" ]
	then
		ssl_country="US"
	else
		ssl_country=$(echo "${ssl_country}"|sed -E 's|^(..).+|\1|')
	fi
	if [ -z "${ssl_common}" ]
	then
		ssl_common="localhost"
	fi

	cat >"${SSLCONF}" <<-__EOF__
	[ ca ]
	default_ca                      = CA_default

	[ CA_default ]
	dir                             = ${SSLCADIR}
	serial                          = ${SSLCADIR}/serial
	database                        = ${SSLCADIR}/index.txt
	new_certs_dir                   = ${SSLCACERTDIR}
	certificate                     = ${SSLCACERT}
	private_key                     = ${SSLCAKEY}
	default_days                    = 3650
	default_md                      = md5
	preserve                        = no
	email_in_dn                     = no
	nameopt                         = default_ca
	certopt                         = default_ca
	policy                          = policy_match
	x509_extensions                 = v3_ca

	[ policy_match ]
	countryName                     = match
	stateOrProvinceName             = match
	organizationName                = match
	organizationalUnitName          = optional
	commonName                      = supplied
	emailAddress                    = optional

	[ req ]
	default_bits                    = 1024
	default_keyfile                 = key.pem
	default_md                      = md5
	string_mask                     = nombstr
	distinguished_name              = req_distinguished_name
	req_extensions                  = v3_req
	prompt                          = no

	[ req_distinguished_name ]
	0.organizationName              = ${ssl_org}
	organizationalUnitName          = ${ssl_unit}
	emailAddress                    = ${ssl_email}
	localityName                    = ${ssl_city}
	stateOrProvinceName             = ${ssl_state}
	countryName                     = ${ssl_country}
	commonName                      = ${ssl_common}

	[ v3_ca ]
	basicConstraints                = CA:TRUE
	subjectKeyIdentifier            = hash
	authorityKeyIdentifier          = keyid:always,issuer:always

	[ v3_req ]
	basicConstraints                = CA:FALSE
	subjectKeyIdentifier            = hash
__EOF__
}

create_CA()
{
	local tmp

	if [ -f "${SSLCAKEY}" -a -f "${SSLCACERT}" ]
	then
		return
	fi

	tmp=$(mktemp /tmp/tmp.XXXXXX)
	dd if=/dev/urandom count=16 bs=1 | uuencode -|head -2 | \
	    tail -1 > "${tmp}"
	${OPENSSL} req -config "${SSLCONF}" -batch -passout file:"${tmp}" \
	    -new -x509 -keyout "${SSLCAKEY}" -out "${SSLCACERT}"

	cp "${SSLCAKEY}" "${SSLCAKEY}.orig"
	${OPENSSL} rsa -passin file:"${tmp}" -in "${SSLCAKEY}.orig" \
	    -out "${SSLCAKEY}"
	rm -f "${tmp}" "${SSLCAKEY}.orig"
	chmod 400 "${SSLCAKEY}"
}

import_certificate()
{
	local certpath="${1}"
	local certfile
	local id

	if [ ! -f "${certpath}" ]
	then
		return 1
	fi

	certfile=$(cat "${certpath}")
	if [ -z "${certfile}" ]
	then
		return 1
	fi

	id=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		id
	FROM
		system_ssl
	ORDER BY
		-id
	LIMIT 1
	")

	if [ -n "${id}" ]
	then
		${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
		UPDATE
			system_ssl
		SET
			ssl_certfile = '${certfile}'
		WHERE
			id = ${id}
		"
	else
		${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
		INSERT INTO 
			system_ssl (ssl_certfile)
		VALUES ('${certfile}')
		"
	fi

	return $?
}

write_key()
{
	awk -v key="${SSLCAKEY}" '
	BEGIN {
		inkeyfile = 0
		keyfile[0] = null;
		keyfile_size = 0;
	}
	/-----BEGIN RSA PRIVATE KEY-----/ {
		inkeyfile = 1;
	}

	/-----END RSA PRIVATE KEY-----/ {
		keyfile[keyfile_size++] = $0;
		inkeyfile = 0;
	}
	/.+/ {
		if (inkeyfile)
			keyfile[keyfile_size++] = $0;
	}
	END {
		for (i = 0;i < keyfile_size;i++)
			print keyfile[i] > key
	}
	' < "${HTTPDCERT}"

	return 0
}

write_cert()
{
	awk -v cert="${SSLCACERT}" '
	BEGIN {
		incertfile = 0
		certfile[0] = null;
		certfile_size = 0;
	}
	/-----BEGIN CERTIFICATE-----/ {
		incertfile = 1;
	}
	
	/-----END CERTIFICATE-----/ {
		certfile[certfile_size++] = $0;
		incertfile = 0;
	}
	/.+/ {
		if (incertfile)
			certfile[certfile_size++] = $0;
	}
	END {
		for (i = 0;i < certfile_size;i++)
			print certfile[i] > cert
	}
	' < "${HTTPDCERT}"

	return 0
}

generate_certificate()
{
	local new_cert tmp

	tmp=$(mktemp /tmp/tmp.XXXXXX)
	${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ssl_certfile

	FROM
		system_ssl

	ORDER BY
		-id

	LIMIT 1
	" > $tmp

	# HACK: the wc -c part shouldn't be required; the GUI is producing $tmp
	# with just a newline, which breaks everything else below.
	size=$(wc -c $tmp | awk '{ print $1 }')
	#if [ -s "${tmp}" ]; then
	if [ $size -gt 1 ]; then
		if ! diff -Nq $tmp $HTTPDCERT >/dev/null; then
			mv $tmp "${HTTPDCERT}"
			new_cert=true
		fi
	else
		# User wants to regenerate the file.
		rm -f ${HTTPDCERT}
		new_cert=true
	fi

	if [ -f "${SSLCAKEY}" -a -f "${SSLCACERT}" ]; then
		:
	else
		if [ -s "${HTTPDCERT}" ]; then
			write_key
			write_cert
		else
			create_CA
			new_cert=true
		fi
	fi

	if [ -s "${SSLCAKEY}" -a -s "${SSLCACERT}" ]; then
		if [ ! -s "$HTTPDCERT" ]; then
			cat "${SSLCAKEY}" "${SSLCACERT}" > "${HTTPDCERT}"
			chmod 400 "${HTTPDCERT}"
			new_cert=true
		fi
		if $new_cert; then
			import_certificate "${HTTPDCERT}"
		fi
	else
		echo "${SSLCAKEY} and/or ${SSLCACERT} does not exist."
	fi
}


create_CSR()
{
	${OPENSSL} req -config ${SSLCONF} -batch -new -nodes -out req.pem 
}

sign_CSR()
{
	${OPENSSL} ca -config ${SSLCONF} -batch -out cert.pem -infiles req.pem 
}

verify_CA()
{
	${OPENSSL} x509 -in cacert.pem -noout -text -dates -purpose
}

verify_CSR()
{
	${OPENSSL} req -in req.pem -text -verify -noout 
}

verify_signature()
{
	${OPENSSL} x509 -in cert.pem -noout -text -dates -purpose
}

do_openssl_config()
{
	generate_openssl_conf
	generate_certificate
}

name="ix-ssl"
start_cmd='do_openssl_config'
stop_cmd=':'
            
load_rc_config $name
run_rc_command "$1"
