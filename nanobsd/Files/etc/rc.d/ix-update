#!/bin/sh
#
# $FreeBSD$
#

# PROVIDE: ix-update
# BEFORE: ix-fstab

. /etc/rc.subr

db_update_real()
{
	echo "Applying database schema changes"

	yes | /usr/local/bin/python /usr/local/www/freenasUI/manage.py migrate account > /data/upgrade.failed
	if [ "$?" != "0" ]; then
		echo "manage.py migrate account failed"
		return 1
	fi
	yes | /usr/local/bin/python /usr/local/www/freenasUI/manage.py migrate freeadmin > /data/upgrade.failed
	if [ "$?" != "0" ]; then
		echo "manage.py migrate freeadmin failed"
		return 1
	fi
	yes | /usr/local/bin/python /usr/local/www/freenasUI/manage.py migrate network > /data/upgrade.failed
	if [ "$?" != "0" ]; then
		echo "manage.py migrate network failed"
		return 1
	fi
	yes | /usr/local/bin/python /usr/local/www/freenasUI/manage.py migrate services > /data/upgrade.failed
	if [ "$?" != "0" ]; then
		echo "manage.py migrate services failed"
		return 1
	fi
	yes | /usr/local/bin/python /usr/local/www/freenasUI/manage.py migrate sharing > /data/upgrade.failed
	if [ "$?" != "0" ]; then
		echo "manage.py migrate sharing failed"
		return 1
	fi
	yes | /usr/local/bin/python /usr/local/www/freenasUI/manage.py migrate storage > /data/upgrade.failed
	if [ "$?" != "0" ]; then
		echo "manage.py migrate storage failed"
		return 1
	fi
	yes | /usr/local/bin/python /usr/local/www/freenasUI/manage.py migrate system > /data/upgrade.failed
	if [ "$?" != "0" ]; then
		echo "manage.py migrate system failed"
		return 1
	fi
	rm /data/upgrade.failed
	return 0
}

handle_error()
{
	echo "Reverting to previous state"

	rm -f /data/need-update
	mv ${FREENAS_CONFIG}.bak ${FREENAS_CONFIG}

	. /etc/nanobsd.conf

	if mount | grep ${NANO_DRIVE}s1 > /dev/null ; then
		gpart set -a active -i 2 ${TARGET_DRIVE}
	else
		gpart set -a active -i 1 ${TARGET_DRIVE}
	fi

	echo "Database upgrade FAILED, check /data/upgrade.failed.  Rebooting in 15 seconds."
	sleep 15
	reboot
}

db_update()
{
	if ! fsck -p /data; then
		echo "/data couldn't be preened clean, trying full fsck"
		if ! fsck -y /data; then
			echo "Cannot fsck -y /data either, your system is likely AFU: sorry."
			exit;
		fi
	fi
	if ! mount -w /data; then
		echo "Cannot mount /data to see if you need an upgrade."
		echo "Your system is likely AFU: bummer!"
		exit;
	fi
	if [ ! -f /data/need-update ]; then
		umount /data
		# No need to update, exit script and continue boot
		exit
	fi
	echo "Saving current ${FREENAS_CONFIG} to ${FREENAS_CONFIG}.bak"
	cp ${FREENAS_CONFIG} ${FREENAS_CONFIG}.bak

	set +e
	db_update_real || handle_error
	set -e

	rm -f /data/need-update
	umount /data
	echo "Database upgrade complete.  Rebooting."
	cd /
	sleep 2
	reboot
}

name="ix-update"
start_cmd='db_update'
stop_cmd=':'

load_rc_config $name
run_rc_command "$1"
