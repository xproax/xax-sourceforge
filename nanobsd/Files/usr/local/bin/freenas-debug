#!/bin/sh
#+
# Copyright 2011 iXsystems
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS 	 
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $FreeBSD$
#####################################################################

. /etc/rc.freenas
. /etc/rc.conf.local

: ${FREENAS_DEBUG_FILE:="/var/tmp/freenas-debug.txt"}

DUMPS="active_directory cache geom hardware ldap network ssl sysctl system zfs"


syslog_debug_on()
{
	echo -e '*.=debug\t/var/log/debug.log' > /tmp/syslog.conf
	cat /etc/syslog.conf >> /tmp/syslog.conf
	
	mount -uw /
	cp /etc/syslog.conf /etc/syslog.conf.bak
	mv /tmp/syslog.conf /etc/syslog.conf
	mount -ur /

	/etc/rc.d/syslogd onerestart >/dev/null 2>&1
	sleep 5
}

syslog_debug_off()
{
	if [ -f /etc/syslog.conf.bak ]
	then
		mount -uw /
		mv /etc/syslog.conf.bak /etc/syslog.conf
		mount -ur /

		/etc/rc.d/syslogd onerestart >/dev/null 2>&1
	fi
}

section_header()
{
	local name="${1}"

	echo "$name" | awk '
	function makeline(ch, len)
	{
		line = "";
		for (i = 0;i < len;i++) {
			line = line ch;
		}
		return line;
	}

	{
		name = $0;
		namelen = length(name);
		if (namelen % 2 == 1) {
			namelen += 1;
			name = name " "
		}

		barlen = 80;
		bar = makeline("-", barlen);

		tmp = barlen - namelen;

		slen = tmp / 2;
		sp = makeline(" ", slen);

		printf("+%s+\n", bar);
		printf("+%s%s%s+\n", sp, name, sp);
		printf("+%s+\n", bar);
	}'
}

section_footer()
{
	echo
	echo
}

freenas_header()
{
	section_header "$(cat /etc/version.freenas)"

	desc=$(sysctl -nd kern.ostype)
	out=$(sysctl -n kern.ostype)
	echo "${desc}: ${out}"

	desc=$(sysctl -nd kern.osrelease)
	out=$(sysctl -n kern.osrelease)
	echo "${desc}: ${out}"

	desc=$(sysctl -nd kern.osrevision)
	out=$(sysctl -n kern.osrevision)
	echo "${desc}: ${out}"

	desc=$(sysctl -nd kern.version)
	out=$(sysctl -n kern.version)
	echo "${desc}: ${out}"

	desc=$(sysctl -nd kern.hostname)
	out=$(sysctl -n kern.hostname)
	echo "${desc}: ${out}"

	desc=$(sysctl -nd kern.bootfile)
	out=$(sysctl -n kern.bootfile)
	echo "${desc}: ${out}"
	
	section_footer
}

active_directory_opt() { echo a; }
active_directory_help() { echo "Dump Active Directory Configuration"; }
active_directory_dump()
{
	local workgroup
	local netbiosname
	local adminname
	local domainname
	local dcname
	local pamfiles
	local onoff
	local enabled="DISABLED"


	#
	#	Turn on debug.log in syslog
	#
	syslog_debug_on

	#
	#	First, check if the Active Directory service is enabled.
	#
	onoff=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		srv_enable
	FROM
		services_services
	WHERE
		srv_service = 'activedirectory'
	")

	if [ "${onoff}" = "1" ]
	then
		enabled="ENABLED"
	fi

	section_header "Active Directory Status"
	echo "Active Directory is ${enabled}"
	section_footer

	#
	#	Next, dump Active Directory configuration
	#
	local IFS="|"
	read workgroup netbiosname adminname domainname dcname <<-__AD__
	$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ad_workgroup,
		ad_netbiosname,
		ad_adminname,
		ad_domainname,
		ad_dcname

	FROM
		services_activedirectory

	ORDER BY
		-id

	LIMIT 1
	")
__AD__
	
	IFS="
"

	section_header "Active Directory Settings"
	cat<<-__EOF__
	WORKGROUP:              ${workgroup}
	NETBIOS NAME:           ${netbiosname}
	ADMINNAME:              ${adminname}
	DOMAIN NAME:            ${domainname}
	DCNAME:                 ${dcname}
__EOF__
	section_footer

	#
	#	Dump kerberos configuration
	#
	section_header "${PATH_KRB5_CONFIG}"
	cat "${PATH_KRB5_CONFIG}"
	section_footer

	#
	#	Dump nsswitch.conf
	#
	section_header "${PATH_NS_CONF}"
	cat "${PATH_NS_CONF}"
	section_footer

	#
	#	Dump pam configuration
	#
	section_header "${PAM_DIR}"
	for pf in $(ls "${PAM_DIR}"|grep -v README)
	do
		section_header "${PAM_DIR}/${pf}"
		cat "${PAM_DIR}/${pf}"
		section_footer
	done
	section_footer

	#
	#	Dump resolver configuration
	#
	section_header "/etc/resolv.conf"
	cat "/etc/resolv.conf"
	section_footer

	#
	#	Dump hosts configuration
	#
	section_header "/etc/hosts"
	cat "/etc/hosts"
	section_footer

	#
	#	List interfaces
	#
	section_header "ifconfig -a"
	ifconfig -a
	section_footer

	#
	#	Dump samba configuration
	#
	section_header "${SMB_CONF}"
	cat "${SMB_CONF}"
	section_footer

	#
	#	List kerberos tickets
	#
	section_header "Kerberos Tickets"
	klist
	section_footer

	#
	#	Dump Active Directory NSS configuration
	#
	section_header "${NSS_LDAP_CONF}"
	cat "${NSS_LDAP_CONF}"
	section_footer

	#
	#	Dump Active Directory domain status
	#
	section_header "Active Directory Domain Status"
	net ads info
	section_footer

	#
	#	Check Active Directory trust secret
	#
	section_header "Active Directory Trust Secret"
	wbinfo -t
	section_footer

	#
	#	Dump Active Directory users and groups
	#
	section_header "Active Directory Users and Groups"
	section_header "Using wbinfo"
	section_header "Users"
	wbinfo -u
	section_header "Groups"
	wbinfo -g
	section_header "Using getent"
	section_header "Users"
	getent passwd
	section_header "Groups"
	getent group
	section_footer

	#
	#	Dump cache info
	#
	cache_dump "AD"

	#
	#	Include LDAP debugging
	#
	section_header "/var/log/debug.log"
	cat /var/log/debug.log
	section_footer

	#
	#	Turn off debug.log in syslog
	#
	syslog_debug_off
}

cache_opt() { echo c; }
cache_help() { echo "Dump (AD|LDAP) Cache"; }
cache_dump()
{
	local cachetype="${1}"

	cachedir="${FREENAS_CACHEDIR}"
	directory_cachedir=

	case ${cachetype} in
		AD) directory_cachedir="${cachedir}/.ldap/.activedirectory" ;;
		LDAP) directory_cachedir="${cachedir}/.ldap/.ldap" ;;
	esac

	directory_local_users="${directory_cachedir}/.local/.users/.cache.db"
	directory_local_groups="${directory_cachedir}/.local/.users/.cache.db"
	directory_users="${directory_cachedir}/.users/.cache.db"
	directory_groups="${directory_cachedir}/.groups/.cache.db"

	if [ -f "${directory_local_users}" ]
	then
		section_header "${directory_local_users}"
		/usr/local/bin/db_stat-4.6 -d "${directory_local_users}"
		section_footer
	fi

	if [ -f "${directory_local_groups}" ]
	then
		section_header "${directory_local_groups}"
		/usr/local/bin/db_stat-4.6 -d "${directory_local_groups}"
		section_footer
	fi

	if [ -f "${directory_users}" ]
	then
		section_header "${directory_users}"
		/usr/local/bin/db_stat-4.6 -d "${directory_users}"
		section_footer
	fi

	if [ -f "${directory_groups}" ]
	then
		section_header "${directory_groups}"
		/usr/local/bin/db_stat-4.6 -d "${directory_groups}"
		section_footer
	fi

	section_header "User and Group cache dump"
	/usr/local/www/freenasUI/tools/cachetool.py dump
	section_footer
}

geom_opt() { echo g; }
geom_help() { echo "Dump GEOM configuration"; }
geom_dump()
{
	geom_inode=$(ls -i /sbin/geom|awk '{ print $1 }')
	classes=$(ls -i /sbin|grep "^${geom_inode}"|awk '{ print $2 }')

	section_header "GEOM classes"
	for c in ${classes}
	do
		if $(${c} status >/dev/null 2>&1)
		then
			list=$(${c} list)
			status=$(${c} status)
			if [ -z "${list}" -a -z "${status}" ] 
			then
				continue
			fi

			if [ -n "${list}" ]
			then
				section_header "${c} list"
				${c} list
				section_footer
			fi

			if [ -n "${status}" ]
			then
				section_header "${c} status"
				${c} status
				section_footer
			fi	
		fi
	done
	section_footer
}

hardware_opt() { echo h; }
hardware_help() { echo "Dump Hardware Configuration"; }
hardware_dump()
{
	section_header "Hardware"

	desc=$(sysctl -nd hw.machine)
	out=$(sysctl -n hw.machine)
	echo "${desc}: ${out}"

	desc=$(sysctl -nd hw.machine_arch)
	out=$(sysctl -n hw.machine_arch)
	echo "${desc}: ${out}"

	desc=$(sysctl -nd hw.model)
	out=$(sysctl -n hw.model)
	echo "${desc}: ${out}"

	desc=$(sysctl -nd hw.ncpu)
	out=$(sysctl -n hw.ncpu)
	echo "${desc}: ${out}"

	desc=$(sysctl -nd kern.smp.cpus)
	out=$(sysctl -n kern.smp.cpus)
	echo "${desc}: ${out}"

	desc=$(sysctl -nd dev.cpu.0.freq)
	freq=$(sysctl -n dev.cpu.0.freq)
	out=$(echo "scale=4;${freq}/1024"|bc|xargs printf "%0.2f")
	echo "${desc}: ${out} Ghz"

	desc="Physical Memory"
	ram=$(sysctl -n hw.physmem)
	rram=$(echo "scale=4;${ram}/1024/1024/1024"|bc|xargs printf "%0.2f")
	echo "${desc}: ${rram} GiB"

	section_footer

	section_header "pciconf -lv"
	pciconf -lv
	section_footer

	section_header "devinfo -rv"
	devinfo -rv
	section_footer

	section_header "usbconfig list"
	usbconfig list
	section_footer

	section_header "dmidecode"
	dmidecode
	section_footer

	section_header "memcontrol list"
	memcontrol list
	section_footer

	section_header "camcontrol devlist"
	camcontrol devlist
	section_footer

	section_header "atacontrol list"
	atacontrol list
	section_footer
}

ldap_opt() { echo l; }
ldap_help() { echo "Dump LDAP Configuration"; }
ldap_dump()
{
	local onoff

	#
	#	Turn on debug.log in syslog
	#
	syslog_debug_on

	#
	#	First, check if the LDAP service is enabled.
	#
	onoff=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		srv_enable
	FROM
		services_services
	WHERE
		srv_service = 'ldap'
	")

	if [ "${onoff}" = "1" ]
	then
		enabled="ENABLED"
	fi

	section_header "LDAP Status"
	echo "LDAP is ${enabled}"
	section_footer

	#
	#	Next, dump LDAP configuration
	#
	local IFS="|"
	read hostname basedn pwencryption anonbind ssl machinesuffix\
		groupsuffix usersuffix passwordsuffix rootbasedn<<-__LDAP__
	$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ldap_hostname,
		ldap_basedn,
		ldap_pwencryption,
		ldap_anonbind,
		ldap_ssl,
		ldap_machinesuffix,
		ldap_groupsuffix,
		ldap_usersuffix,
		ldap_passwordsuffix,
		ldap_rootbasedn

	FROM
		services_ldap

	ORDER BY
		-id

	LIMIT 1
	")
__LDAP__
	
	IFS="
"

	section_header "LDAP Settings"
	cat<<-__EOF__
	HOSTNAME:               ${hostname}
	BASEDN:                 ${basedn}
	PWENCRYPTION:           ${pwencryption}
	ANONBIND:               ${anonbind}
	SSL:                    ${ssl}
	MACHINESUFFIX:          ${machinesuffix}
	GROUPSUFFIX:            ${groupsuffix}
	USERSUFFIX:             ${usersuffix}
	PASSWORDSUFFIX:         ${passwordsuffix}
	ROOTBASEDN:             ${rootbasedn}
__EOF__
	section_footer

	#
	#	Dump nsswitch.conf
	#
	section_header "${PATH_NS_CONF}"
	cat "${PATH_NS_CONF}"
	section_footer

	#
	#	Dump pam configuration
	#
	section_header "${PAM_DIR}"
	for pf in $(ls "${PAM_DIR}"|grep -v README)
	do
		section_header "${PAM_DIR}/${pf}"
		cat "${PAM_DIR}/${pf}"
		section_footer
	done
	section_footer

	#
	#	Dump resolver configuration
	#
	section_header "/etc/resolv.conf"
	cat "/etc/resolv.conf"
	section_footer

	#
	#	Dump hosts configuration
	#
	section_header "/etc/hosts"
	cat "/etc/hosts"
	section_footer

	#
	#	List interfaces
	#
	section_header "ifconfig -a"
	ifconfig -a
	section_footer

	#
	#	Dump samba configuration
	#
	section_header "${SMB_CONF}"
	cat "${SMB_CONF}"
	section_footer

	#
	#	Dump LDAP configuration
	#
	section_header "${LDAP_CONF}"
	cat "${LDAP_CONF}"
	section_footer

	#
	#	Dump NSS configuration
	#
	section_header "${NSS_LDAP_CONF}"
	cat "${NSS_LDAP_CONF}"
	section_footer

	#
	#	Dump LDAP users and groups
	#
	section_header "LDAP Users and Groups"
	section_header "Users"
	getent passwd
	section_header "Groups"
	getent group
	section_footer

	#
	#	Dump cache info
	#
	cache_dump "LDAP"

	#
	#	Include LDAP debugging
	#
	section_header "/var/log/debug.log"
	cat /var/log/debug.log
	section_footer

	#
	#	Turn off debug.log in syslog
	#
	syslog_debug_off
}

network_opt() { echo n; }
network_help() { echo "Dump Network Configuration"; }
network_dump()
{
	section_header "Hostname"
	hostname
	section_footer

	section_header "/etc/resolv.conf"
	cat /etc/resolv.conf
	section_footer

	section_header "Interfaces"
	for i in $(ifconfig -l)
	do
		ifconfig ${i}
		echo

		if $(ifconfig ${i}|grep -q '\bUP\b')
		then
			ips=$(ifconfig ${i}|grep '\binet\b'|awk '{ print $2 }'|xargs)
			ips6=$(ifconfig ${i}|grep '\binet6\b'|awk '{ print $2 }'|xargs)

			if [ -n "${ips}" ]
			then
				for ip in ${ips}
				do
					gw=$(route -n show -inet ${ip}|grep gateway|xargs)
					if [ -n "${gw}" ]
					then
						echo "${ip} gateway ${gw}"
					fi
				done
			fi

			if [ -n "${ips6}" ]
			then
				for ip6 in ${ips6}
				do
					gw=$(route -n show -inet6 ${ip6}|grep gateway|xargs)
					if [ -n "${gw}" ]
					then
						echo "${ip6} gateway ${gw}"
					fi
				done
			fi
		fi
	done
	section_footer

	section_header "Default Route"
	route -n show default|grep gateway|awk '{ print $2 }'
	section_footer

	section_header "netstat -nr"
	netstat -nr
	section_footer

	section_header "arp -a"
	arp -a
	section_footer
}

ssl_opt() { echo s; }
ssl_help() { echo "Dump SSL Configuration"; }
ssl_dump()
{
	ssldir="/etc/ssl"
	fndir="${ssldir}/freenas"
	cadir="${fndir}/CA"
	privdir="${cadir}/private"
	certsdir="${cadir}/certs"
	sslconf="${fndir}/openssl.conf"
	httpdpem="${fndir}/httpd.pem"

	section_header "${ssldir}"
	ls -l ${ssldir}
	section_footer

	section_header "${fndir}"
	ls -l ${fndir}
	section_footer

	section_header "${cadir}"
	ls -l ${cadir}
	section_footer

	section_header "${privdir}"
	ls -l ${privdir}
	section_footer

	section_header "${certsdir}"
	ls -l ${certsdir}
	section_footer

	section_header "${sslconf}"
	cat ${sslconf}
	section_footer

	section_header "${httpdpem}"
	cat ${httpdpem}
	section_footer
}

sysctl_opt() { echo y; }
sysctl_help() { echo "Dump Sysctl Configuration"; }
sysctl_dump()
{
	section_header "sysctl -a"
	sysctl -a
	section_footer
}

system_opt() { echo t; }
system_help() { echo "Dump System Information"; }
system_dump()
{
	section_header "uptime"
	uptime
	section_footer

	section_header "ps -axw"
	ps -axw
	section_footer

	section_header "mount"
	mount
	section_footer

	section_header "df -h"
	df -h
	section_footer

	section_header "swapinfo -h"
	swapinfo -h
	section_footer

	section_header "kldstat"
	kldstat
	section_footer

	section_header "dmesg"
	dmesg
	section_footer
}

zfs_opt() { echo z; }
zfs_help() { echo "Dump ZFS configuration"; }
zfs_dump()
{
	section_header "ZFS Pools"
	zpool list
	section_footer

	section_header "ZFS Pools Status"
	zpool status
	section_footer

	section_header "ZFS Pools Properties"
	pools=$(zpool list -H|awk '{ print $1 }'|xargs)
	for p in ${pools}
	do
		section_header "${p}"
		zpool get all ${p}
		section_footer
	done
	section_footer

	section_header "ZFS Datasets"
	zfs list 
	section_footer

	section_header "ZFS Datasets Properties"
	sets=$(zfs list -H|awk '{ print $1 }'|xargs)
	for s in ${sets}
	do
		section_header "${s}"
		zfs get all ${s}
		section_footer
	done
	section_footer
}

usage()
{

	cat<<-__EOF__
	Usage: $0 <options>
	Where options is:
__EOF__

	for d in ${DUMPS}
	do
		opt=$(eval "${d}_opt" 2>/dev/null)
		if [ -z "${opt}" ]
		then
			continue
		fi

		help=$(eval "${d}_help" 2>/dev/null)
		echo -e "    -${opt}\t\t${help}"
	done
}

is_function()
{
	local name="${1}"

	if ! $(type "${name}" 2>/dev/null|grep -q 'shell function')
	then
		return 1
	fi

	return 0
}

is_valid_dump()
{
	local name="${1}"
	local ret=0

	if ! is_function "${name}_dump"
	then
		ret=1
	fi

	if ! is_function "${name}_opt"
	then
		ret=1
	fi

	if ! is_function "${name}_help"
	then
		ret=1
	fi

	return ${ret}
}

send_email()
{
	local email="${1}"

	if [ -n "${email}" ]
	then
		mfile=/var/tmp/.mail.txt

		cat<<-EOF>"${mfile}"
		To: ${email}
		Subject: FreeNAS Debug

EOF
		cat "${FREENAS_DEBUG_FILE}" >> "${mfile}"
		echo -e "\n\n" >> "${mfile}"

		sendmail -t < "${mfile}"
		rm "${mfile}"
	fi
}

main()
{
	email=""

	if [ "$#" = "0" ]
	then
		usage
		exit 2
	fi

	opts=""
	for d in ${DUMPS}
	do
		if ! is_valid_dump "${d}"
		then
			continue
		fi

		opt=$(eval "${d}_opt" 2>/dev/null)
		export "$(echo dump_func_${opt})=${d}_dump"
		opts="${opts}${opt}"
	done

	: > ${FREENAS_DEBUG_FILE}
	freenas_header 2>&1|tee -a "${FREENAS_DEBUG_FILE}"
	while getopts ":e:${opts}" OPTION
	do
		local var=\$$(echo "dump_func_${OPTION}")
		local func=$(eval "echo ${var}")

		if [ "${OPTION}" = "e" ]
		then
			email="${OPTARG}"
		fi

		if is_function "${func}"
		then
			eval "${func}" 2>&1|tee -a "${FREENAS_DEBUG_FILE}"
		fi
	done
	send_email "${email}"
}

main $*
