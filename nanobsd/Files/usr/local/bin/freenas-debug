#!/bin/sh
#+
# Copyright 2010 iXsystems
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# $FreeBSD$
#####################################################################

. /etc/rc.freenas
. /etc/rc.conf.local

: ${FREENAS_DEBUG_FILE:="/var/tmp/freenas-debug.txt"}

section_header()
{
	local name="${1}"

	echo "$name" | awk '
	function makeline(ch, len)
	{
		line = "";
		for (i = 0;i < len;i++) {
			line = line ch;
		}
		return line;
	}

	{
		name = $0;
		namelen = length(name);
		if (namelen % 2 == 1) {
			namelen += 1;
			name = name " "
		}

		barlen = 80;
		bar = makeline("-", barlen);

		tmp = barlen - namelen;

		slen = tmp / 2;
		sp = makeline(" ", slen);

		printf("+%s+\n", bar);
		printf("+%s%s%s+\n", sp, name, sp);
		printf("+%s+\n", bar);
	}'
}

section_footer()
{
	echo
	echo
}

debug_active_directory()
{
	local workgroup
	local netbiosname
	local adminname
	local windows_version
	local domainname
	local dcname
	local pamfiles
	local onoff
	local enabled="DISABLED"


	#
	#	First, check if the Active Directory service is enabled.
	#
	onoff=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		srv_enable
	FROM
		services_services
	WHERE
		srv_service = 'activedirectory'
	")

	if [ "${onoff}" = "1" ]
	then
		enabled="ENABLED"
	fi

	section_header "Active Directory Status"
	echo "Active Directory is ${enabled}"
	section_footer

	#
	#	Next, dump Active Directory configuration
	#
	local IFS="|"
	read workgroup netbiosname adminname windows_version domainname dcname <<-__AD__
	$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ad_workgroup,
		ad_netbiosname,
		ad_adminname,
		ad_windows_version,
		ad_domainname,
		ad_dcname

	FROM
		services_activedirectory

	ORDER BY
		-id

	LIMIT 1
	")
__AD__
	
	IFS="
"

	section_header "Active Directory Settings"
	cat<<-__EOF__
	WORKGROUP:              ${workgroup}
	NETBIOS NAME:           ${netbiosname}
	ADMINNAME:              ${adminname}
	WINDOWS VERSION:        ${windows_version}
	DOMAIN NAME:            ${domainname}
	DCNAME:                 ${dcname}
__EOF__
	section_footer

	#
	#	Dump kerberos configuration
	#
	section_header "${PATH_KRB5_CONFIG}"
	cat "${PATH_KRB5_CONFIG}"
	section_footer

	#
	#	Dump nsswitch.conf
	#
	section_header "${PATH_NS_CONF}"
	cat "${PATH_NS_CONF}"
	section_footer

	#
	#	Dump pam configuration
	#
	section_header "${PAM_DIR}"
	for pf in $(ls "${PAM_DIR}"|grep -v README)
	do
		section_header "${PAM_DIR}/${pf}"
		cat "${PAM_DIR}/${pf}"
		section_footer
	done
	section_footer

	#
	#	Dump resolver configuration
	#
	section_header "/etc/resolv.conf"
	cat "/etc/resolv.conf"
	section_footer

	#
	#	Dump hosts configuration
	#
	section_header "/etc/hosts"
	cat "/etc/hosts"
	section_footer

	#
	#	List interfaces
	#
	section_header "ifconfig -a"
	ifconfig -a
	section_footer

	#
	#	Dump samba configuration
	#
	section_header "${SMB_CONF}"
	cat "${SMB_CONF}"
	section_footer

	#
	#	List kerberos tickets
	#
	section_header "Kerberos Tickets"
	klist
	section_footer

	#
	#	Dump Active Directory NSS configuration
	#
	section_header "${NSS_LDAP_CONF}"
	cat "${NSS_LDAP_CONF}"
	section_footer

	#
	#	Dump Active Directory domain status
	#
	section_header "Active Directory Domain Status"
	net ads info
	section_footer

	#
	#	Check Active Directory trust secret
	#
	section_header "Active Directory Trust Secret"
	wbinfo -t
	section_footer

	#
	#	Dump Active Directory users and groups
	#
	section_header "Active Directory Users and Groups"
	section_header "Using wbinfo"
	section_header "Users"
	wbinfo -u
	section_header "Groups"
	wbinfo -g
	section_header "Using getent"
	section_header "Users"
	getent passwd
	section_header "Groups"
	getent group
	section_footer
}

debug_ldap()
{
	local onoff

	#
	#	First, check if the LDAP service is enabled.
	#
	onoff=$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		srv_enable
	FROM
		services_services
	WHERE
		srv_service = 'ldap'
	")

	if [ "${onoff}" = "1" ]
	then
		enabled="ENABLED"
	fi

	section_header "LDAP Status"
	echo "LDAP is ${enabled}"
	section_footer

	#
	#	Next, dump LDAP configuration
	#
	local IFS="|"
	read hostname basedn pwencryption anonbind ssl machinesuffix\
		groupsuffix usersuffix passwordsuffix rootbasedn<<-__LDAP__
	$(${FREENAS_SQLITE_CMD} ${FREENAS_CONFIG} "
	SELECT
		ldap_hostname,
		ldap_basedn,
		ldap_pwencryption,
		ldap_anonbind,
		ldap_ssl,
		ldap_machinesuffix,
		ldap_groupsuffix,
		ldap_usersuffix,
		ldap_passwordsuffix,
		ldap_rootbasedn

	FROM
		services_ldap

	ORDER BY
		-id

	LIMIT 1
	")
__LDAP__
	
	IFS="
"

	section_header "LDAP Settings"
	cat<<-__EOF__
	HOSTNAME:               ${hostname}
	BASEDN:                 ${basedn}
	PWENCRYPTION:           ${pwencryption}
	ANONBIND:               ${anonbind}
	SSL:                    ${ssl}
	MACHINESUFFIX:          ${machinesuffix}
	GROUPSUFFIX:            ${groupsuffix}
	USERSUFFIX:             ${usersuffix}
	PASSWORDSUFFIX:         ${passwordsuffix}
	ROOTBASEDN:             ${rootbasedn}
__EOF__
	section_footer

	#
	#	Dump nsswitch.conf
	#
	section_header "${PATH_NS_CONF}"
	cat "${PATH_NS_CONF}"
	section_footer

	#
	#	Dump pam configuration
	#
	section_header "${PAM_DIR}"
	for pf in $(ls "${PAM_DIR}"|grep -v README)
	do
		section_header "${PAM_DIR}/${pf}"
		cat "${PAM_DIR}/${pf}"
		section_footer
	done
	section_footer

	#
	#	Dump resolver configuration
	#
	section_header "/etc/resolv.conf"
	cat "/etc/resolv.conf"
	section_footer

	#
	#	Dump hosts configuration
	#
	section_header "/etc/hosts"
	cat "/etc/hosts"
	section_footer

	#
	#	List interfaces
	#
	section_header "ifconfig -a"
	ifconfig -a
	section_footer

	#
	#	Dump samba configuration
	#
	section_header "${SMB_CONF}"
	cat "${SMB_CONF}"
	section_footer

	#
	#	Dump LDAP configuration
	#
	section_header "${LDAP_CONF}"
	cat "${LDAP_CONF}"
	section_footer

	#
	#	Dump NSS configuration
	#
	section_header "${NSS_LDAP_CONF}"
	cat "${NSS_LDAP_CONF}"
	section_footer

	#
	#	Dump LDAP users and groups
	#
	section_header "LDAP Users and Groups"
	section_header "Users"
	getent passwd
	section_header "Groups"
	getent group
	section_footer
}

debug_ssl()
{
	echo "Not implemented."
}

usage()
{
	cat<<-__EOF__
	Usage: $0 <options>
	Where options is:
	    -a                Debug Active Directory
	    -l                Debug LDAP
	    -s                Debug SSL
__EOF__
}

main()
{
	if [ "$#" = "0" ]
	then
		usage
		exit 2
	fi

	debug_func=""
	: > ${FREENAS_DEBUG_FILE}
	while getopts ":al" OPTION
	do
		case "${OPTION}" in
			a) debug_func="debug_active_directory" ;;
			l) debug_func="debug_ldap" ;;
			s) debug_func="debug_ssl" ;;
			:|\?) usage ;;
		esac
	done
	eval ${debug_func} > "${FREENAS_DEBUG_FILE}" 2>&1
}

main $*
