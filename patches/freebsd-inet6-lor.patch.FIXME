diff --git sys/netinet6/in6.c sys/netinet6/in6.c
index 2684f1e..a044bb5 100644
--- sys/netinet6/in6.c
+++ sys/netinet6/in6.c
@@ -1196,6 +1196,7 @@ in6_purgeaddr(struct ifaddr *ifa)
 	int plen, error;
 	struct rtentry *rt;
 	struct ifaddr *ifa0, *nifa;
+	struct sockaddr_in6 sin6;
 
 	/*
 	 * find another IPv6 address as the gateway for the
@@ -1279,6 +1280,19 @@ in6_purgeaddr(struct ifaddr *ifa)
 	    0)
 		goto cleanup; 
 
+	/*
+	 * As for the mltaddr above, proactively prepare the sin6 to avoid
+	 * rtentry un- and re-locking.
+	 */
+	if (ifa0 != NULL) {
+		bzero(&sin6, sizeof(sin6));
+		sin6.sin6_len = sizeof(sin6);
+		sin6.sin6_family = AF_INET6;
+		memcpy(&sin6.sin6_addr, &satosin6(ifa0->ifa_addr)->sin6_addr, 
+		    sizeof(sin6.sin6_addr));
+		in6_setscope(&sin6.sin6_addr, ifa0->ifa_ifp, NULL);
+	}
+
 	rt = rtalloc1((struct sockaddr *)&mltaddr, 0, 0UL);
 	if (rt != NULL && rt->rt_gateway != NULL &&
 	    (memcmp(&satosin6(rt->rt_gateway)->sin6_addr, 
@@ -1303,15 +1317,7 @@ in6_purgeaddr(struct ifaddr *ifa)
 			/*
 			 * replace the gateway of the route
 			 */
-			struct sockaddr_in6 sa;
-
-			bzero(&sa, sizeof(sa));
-			sa.sin6_len = sizeof(struct sockaddr_in6);
-			sa.sin6_family = AF_INET6;
-			memcpy(&sa.sin6_addr, &satosin6(ifa0->ifa_addr)->sin6_addr, 
-			       sizeof(sa.sin6_addr));
-			in6_setscope(&sa.sin6_addr, ifa0->ifa_ifp, NULL);
-			memcpy(rt->rt_gateway, &sa, sizeof(sa));
+			memcpy(rt->rt_gateway, &sin6, sizeof(sin6));
 			RTFREE_LOCKED(rt);
 		}
 	} else {
@@ -1353,15 +1359,7 @@ in6_purgeaddr(struct ifaddr *ifa)
 			/*
 			 * replace the gateway of the route
 			 */
-			struct sockaddr_in6 sa;
-
-			bzero(&sa, sizeof(sa));
-			sa.sin6_len = sizeof(struct sockaddr_in6);
-			sa.sin6_family = AF_INET6;
-			memcpy(&sa.sin6_addr, &satosin6(ifa0->ifa_addr)->sin6_addr, 
-			       sizeof(sa.sin6_addr));
-			in6_setscope(&sa.sin6_addr, ifa0->ifa_ifp, NULL);
-			memcpy(rt->rt_gateway, &sa, sizeof(sa));
+			memcpy(rt->rt_gateway, &sin6, sizeof(sin6));
 			RTFREE_LOCKED(rt);
 		}
 	} else {
