Index: net/samba36/Makefile
===================================================================
RCS file: /home/ncvs/ports/net/samba36/Makefile,v
retrieving revision 1.3
diff -u -p -r1.3 Makefile
--- net/samba36/Makefile	21 Oct 2011 02:12:22 -0000	1.3
+++ net/samba36/Makefile	27 Jan 2012 20:24:54 -0000
@@ -7,7 +7,7 @@
 
 PORTNAME=		${SAMBA_BASENAME}36
 PORTVERSION=		3.6.1
-PORTREVISION?=		0
+PORTREVISION?=		2
 CATEGORIES?=		net
 MASTER_SITES=		${MASTER_SITE_SAMBA}
 MASTER_SITE_SUBDIR=	. old-versions rc pre
@@ -145,8 +145,19 @@ CONFIGURE_ARGS+=	--disable-cups --disabl
 .	endif
 .else
 # Samba server itself
-USE_RC_SUBR=		${SAMBA_BASENAME}
-SUB_FILES=		pkg-install pkg-message pkg-deinstall smb.conf.sample
+USE_RC_SUBR=		${SAMBA_BASENAME} \
+			nmbd \
+			smbd
+
+.if !defined(WITHOUT_WINBIND)
+USE_RC_SUBR+=		winbindd
+.endif
+
+SUB_FILES=		pkg-install \
+			pkg-message \
+			pkg-deinstall \
+			rc.samba \
+			smb.conf.sample \
 
 PLIST=			${WRKDIR}/.PLIST
 # We don't (yet) have clustered FS for cluster support
@@ -533,6 +544,7 @@ post-install:
 # !NOPORTDOCS
 .endif
 # Run post-install script
+	${INSTALL_SCRIPT} "${WRKDIR}/rc.samba" "${SAMBA_CONFDIR}/."
 	@${SH} ${PKGINSTALL} ${PKGNAME} POST-INSTALL
 	@${CAT} ${PKGMESSAGE}
 
Index: net/samba36/pkg-plist
===================================================================
RCS file: /home/ncvs/ports/net/samba36/pkg-plist,v
retrieving revision 1.3
diff -u -p -r1.3 pkg-plist
--- net/samba36/pkg-plist	21 Oct 2011 02:12:22 -0000	1.3
+++ net/samba36/pkg-plist	27 Jan 2012 20:24:54 -0000
@@ -20,6 +20,7 @@ bin/smbta-util
 bin/smbtar
 bin/smbtree
 bin/testparm
+etc/rc.samba
 %%SMBTORTURE%%bin/smbtorture
 %%WINBIND%%bin/wbinfo
 %%WINBIND%%include/wbclient.h
Index: net/samba36/files/nmbd.in
===================================================================
RCS file: net/samba36/files/nmbd.in
diff -N net/samba36/files/nmbd.in
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ net/samba36/files/nmbd.in	27 Jan 2012 20:24:54 -0000
@@ -0,0 +1,31 @@
+#!/bin/sh
+#
+# $FreeBSD$
+
+# PROVIDE: nmbd
+# REQUIRE: NETWORKING SERVERS DAEMON ldconfig resolv
+# BEFORE: LOGIN
+# KEYWORD: shutdown
+#
+# See .../rc.d/samba for more details.
+#
+
+name="nmbd"
+
+. /etc/rc.subr
+. %%SAMBA_CONFDIR%%/rc.samba
+
+rcvar=$(set_rcvar)
+
+load_rc_config $name
+
+: ${nmbd_enable=NO}
+: ${samba_enable=NO}
+if ! checkyesno ${name}_enable && checkyesno samba_enable; then
+	eval ${name}_enable="YES"
+fi
+: ${nmbd_flags="-D"}
+
+reload_cmd="reload_cmd"
+
+run_rc_command "$1"
Index: net/samba36/files/patch-source3__modules__vfs_shadow_copy2.c
===================================================================
RCS file: net/samba36/files/patch-source3__modules__vfs_shadow_copy2.c
diff -N net/samba36/files/patch-source3__modules__vfs_shadow_copy2.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ net/samba36/files/patch-source3__modules__vfs_shadow_copy2.c	27 Jan 2012 20:26:49 -0000
@@ -0,0 +1,127 @@
+--- ./source3/modules/vfs_shadow_copy2.c.orig	2011-10-19 03:48:48.000000000 +0900
++++ ./source3/modules/vfs_shadow_copy2.c	2011-11-09 18:48:16.000000000 +0900
+@@ -237,7 +237,7 @@
+ 	if (shadow_copy2_match_name(fname, &gmt_start)) {	\
+ 		char *name2; \
+ 		rtype ret; \
+-		name2 = convert_shadow2_name(handle, fname, gmt_start);	\
++		name2 = convert_shadow2_name(handle, fname, gmt_start, True);	\
+ 		if (name2 == NULL) { \
+ 			errno = EINVAL; \
+ 			return eret; \
+@@ -258,7 +258,7 @@
+ 		char *name2; \
+ 		char *smb_base_name_tmp = NULL; \
+ 		rtype ret; \
+-		name2 = convert_shadow2_name(handle, smb_fname->base_name, gmt_start); \
++		name2 = convert_shadow2_name(handle, smb_fname->base_name, gmt_start, True); \
+ 		if (name2 == NULL) { \
+ 			errno = EINVAL; \
+ 			return eret; \
+@@ -285,7 +285,7 @@
+         if (shadow_copy2_match_name(fname, &gmt_start)) {	\
+                 char *name2; \
+                 NTSTATUS ret; \
+-                name2 = convert_shadow2_name(handle, fname, gmt_start);	\
++                name2 = convert_shadow2_name(handle, fname, gmt_start, True);	\
+                 if (name2 == NULL) { \
+                         errno = EINVAL; \
+                         return eret; \
+@@ -409,7 +409,8 @@
+   convert a filename from a share relative path, to a path in the
+   snapshot directory
+  */
+-static char *convert_shadow2_name(vfs_handle_struct *handle, const char *fname, const char *gmt_path)
++static char *convert_shadow2_name(vfs_handle_struct *handle, const char *fname,
++				  const char *gmt_path, const bool incl_rel)
+ {
+ 	TALLOC_CTX *tmp_ctx = talloc_new(handle->data);
+ 	const char *snapdir, *relpath, *baseoffset, *basedir;
+@@ -486,11 +487,13 @@
+ 	if (*relpath == '/') relpath++;
+ 	if (*baseoffset == '/') baseoffset++;
+ 
+-	ret = talloc_asprintf(handle->data, "%s/%s/%s/%s",
++	ret = talloc_asprintf(handle->data, "%s/%s%s%s%s%s",
+ 			      snapdir, 
+ 			      snapshot,
++			      *baseoffset ? "/" : "",
+ 			      baseoffset, 
+-			      relpath);
++			      *relpath ? "/" : "",
++			      incl_rel ? relpath : "");
+ 	DEBUG(6,("convert_shadow2_name: '%s' -> '%s'\n", fname, ret));
+ 	talloc_free(tmp_ctx);
+ 	return ret;
+@@ -687,68 +690,17 @@
+ static const char *shadow_copy2_connectpath(struct vfs_handle_struct *handle,
+ 					    const char *fname)
+ {
+-	TALLOC_CTX *tmp_ctx;
+-	const char *snapdir, *baseoffset, *basedir, *gmt_start;
+-	size_t baselen;
++	const char *gmt_start;
+ 	char *ret;
+ 
+ 	DEBUG(10, ("shadow_copy2_connectpath called with %s\n", fname));
+ 
+ 	if (!shadow_copy2_match_name(fname, &gmt_start)) {
+-		return handle->conn->connectpath;
+-	}
+-
+-        /*
+-         * We have to create a real temporary context because we have
+-         * to put our result on talloc_tos(). Thus we can't use a
+-         * talloc_stackframe() here.
+-         */
+-	tmp_ctx = talloc_new(talloc_tos());
+-
+-	fname = shadow_copy2_normalise_path(tmp_ctx, fname, gmt_start);
+-	if (fname == NULL) {
+-		TALLOC_FREE(tmp_ctx);
+-		return NULL;
+-	}
+-
+-	snapdir = shadow_copy2_find_snapdir(tmp_ctx, handle);
+-	if (snapdir == NULL) {
+-		DEBUG(2,("no snapdir found for share at %s\n",
+-			 handle->conn->connectpath));
+-		TALLOC_FREE(tmp_ctx);
+-		return NULL;
++		return SMB_VFS_NEXT_CONNECTPATH(handle, fname);
+ 	}
+ 
+-	basedir = shadow_copy2_find_basedir(tmp_ctx, handle);
+-	if (basedir == NULL) {
+-		DEBUG(2,("no basedir found for share at %s\n",
+-			 handle->conn->connectpath));
+-		TALLOC_FREE(tmp_ctx);
+-		return NULL;
+-	}
+-
+-	baselen = strlen(basedir);
+-	baseoffset = handle->conn->connectpath + baselen;
+-
+-	/* some sanity checks */
+-	if (strncmp(basedir, handle->conn->connectpath, baselen) != 0 ||
+-	    (handle->conn->connectpath[baselen] != 0
+-	     && handle->conn->connectpath[baselen] != '/')) {
+-		DEBUG(0,("shadow_copy2_connectpath: basedir %s is not a "
+-			 "parent of %s\n", basedir,
+-			 handle->conn->connectpath));
+-		TALLOC_FREE(tmp_ctx);
+-		return NULL;
+-	}
+-
+-	if (*baseoffset == '/') baseoffset++;
+-
+-	ret = talloc_asprintf(talloc_tos(), "%s/%.*s/%s",
+-			      snapdir,
+-			      GMT_NAME_LEN, fname,
+-			      baseoffset);
++	ret = convert_shadow2_name(handle, fname, gmt_start, False);
+ 	DEBUG(6,("shadow_copy2_connectpath: '%s' -> '%s'\n", fname, ret));
+-	TALLOC_FREE(tmp_ctx);
+ 	return ret;
+ }
+ 
Index: net/samba36/files/rc.samba.in
===================================================================
RCS file: net/samba36/files/rc.samba.in
diff -N net/samba36/files/rc.samba.in
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ net/samba36/files/rc.samba.in	27 Jan 2012 20:24:54 -0000
@@ -0,0 +1,52 @@
+#!/bin/sh
+#
+# $FreeBSD$
+#
+# Generalized rc.d infrastructure script for samba.
+
+: ${command_args=${samba_config:+-s "${samba_config}"}}
+: ${pidfile="%%SAMBA_RUNDIR%%/$name.pid"}
+: ${smbcontrol_cmd=%%PREFIX%%/bin/smbcontrol}
+: ${testparm_cmd=%%PREFIX%%/bin/testparm}
+
+extra_commands="reload status"
+
+samba_parm="${testparm_cmd} -s -v --parameter-name"
+
+samba_lockdir=$(${samba_parm} 'lock directory' ${samba_config:+"${samba_config}"} 2>/dev/null)
+
+case "$name" in
+samba)
+	eval ${name}_flags=""
+	;;
+*)
+	eval ${name}_flags=""
+	eval ${name}_program="%%PREFIX%%/sbin/${name}"
+	;;
+esac
+
+# Reload a samba service.
+#
+# name - samba, nmbd, smbd, winbindd
+reload_cmd()
+{
+	local message_type reload_dest
+
+	if [ "$name" = "samba" ]; then
+		reload_dest="all"
+	else
+		reload_dest="$name"
+	fi
+
+	# XXX: reload doesn't print out any diags.
+	debug "reloading $name configuration"
+	echo "Reloading $name"
+	message_type="reload-config"
+
+	$smbcontrol_cmd $reload_dest $message_type $command_args \
+	    >/dev/null 2>&1
+	if [ $? -ne 0 ]; then
+		return 1
+	fi
+	return 0
+}
Index: net/samba36/files/samba.in
===================================================================
RCS file: /home/ncvs/ports/net/samba36/files/samba.in,v
retrieving revision 1.1
diff -u -p -r1.1 samba.in
--- net/samba36/files/samba.in	16 Oct 2011 22:35:25 -0000	1.1
+++ net/samba36/files/samba.in	27 Jan 2012 20:24:54 -0000
@@ -1,14 +1,8 @@
 #!/bin/sh
 #
-# $FreeBSD: ports/net/samba36/files/samba.in,v 1.1 2011/10/16 22:35:25 timur Exp $
-#
-
-# PROVIDE: nmbd smbd
-%%WINBIND%%# PROVIDE: winbindd
-# REQUIRE: NETWORKING SERVERS DAEMON ldconfig resolv
-%%CUPS%%# REQUIRE: cupsd
-# BEFORE: LOGIN
-# KEYWORD: shutdown
+# PROVIDE: samba
+# REQUIRE: nmbd smbd
+%%WINBIND%%# REQUIRE: winbindd
 #
 # Add the following lines to /etc/rc.conf.local or /etc/rc.conf
 # to enable this service:
@@ -17,152 +11,83 @@
 # or, for fine grain control:
 #nmbd_enable="YES"
 #smbd_enable="YES"
-%%WINBIND%%# You need to enable winbindd separately, by adding:
+%%WINBIND%%# You can enable winbindd separately, by adding:
 %%WINBIND%%#winbindd_enable="YES"
+%%WINBIND%%# or by adding the 'idmap uid' directive to smb.conf .
 #
 # Configuration file can be set with:
-#samba_config="%%SAMBA_CONFDIR%%/%%SAMBA_CONFIG%%"
-#
+#samba_config="/usr/local/etc/smb.conf"
+
+name="samba"
 
 . /etc/rc.subr
+. /usr/local/etc/rc.samba
 
-name="samba"
 rcvar=$(set_rcvar)
-set_rcvar ${rcvar} "NO" "Samba service" > /dev/null
-# Defaults
-eval ${rcvar}=\${${rcvar}:=NO}
-samba_config_default="%%SAMBA_CONFDIR%%/%%SAMBA_CONFIG%%"
-samba_config=${samba_config="${samba_config_default}"}
-command_args=${samba_config:+-s "${samba_config}"}
-# Fetch parameters from configuration file
-testparm_command="%%PREFIX%%/bin/testparm"
-smbcontrol_command="%%PREFIX%%/bin/smbcontrol"
-samba_parm="${testparm_command} -s -v --parameter-name"
-samba_idmap=$(${samba_parm} 'idmap uid' "${samba_config}" 2>/dev/null)
-samba_lockdir=$(${samba_parm} 'lock directory' "${samba_config}" 2>/dev/null)
-# Load configuration
-load_rc_config "${name}"
-# Setup dependent variables
-if [ -n "${rcvar}" ] && checkyesno "${rcvar}"; then
-    nmbd_enable=${nmbd_enable=YES}
-    smbd_enable=${smbd_enable=YES}
-%%WINBIND%%    # Check that winbindd is actually configured
-%%WINBIND%%    if [ -n "${samba_idmap}" ]; then
-%%WINBIND%%	winbindd_enable=${winbindd_enable=YES}
-%%WINBIND%%    fi
-fi
-# XXX: Hack to enable check of the dependent variables
-eval real_${rcvar}="\${${rcvar}:=NO}"	${rcvar}=YES
-# nmbd
-nmbd_enable=${nmbd_enable:=NO}
-nmbd_flags=${nmbd_flags="-D"}
-set_rcvar nmbd_enable "NO" "nmb daemon" >/dev/null
-# smbd
-smbd_enable=${smbd_enable:=NO}
-smbd_flags=${smbd_flags="-D"}
-set_rcvar smbd_enable "NO" "smb daemon" >/dev/null
-%%WINBIND%%# winbindd
-%%WINBIND%%winbindd_enable=${winbindd_enable:=NO}
-%%WINBIND%%winbindd_flags=${winbindd_flags=''}
-%%WINBIND%%set_rcvar winbindd_enable "NO" "winbind daemon" >/dev/null
-# Custom commands
-extra_commands="reload status"
+
+load_rc_config $name
+
+: ${samba_enable=NO}
+
+samba_daemons="smbd nmbd"
+%%WINBIND%%samba_daemons="$samba_daemons winbindd"
+
 start_precmd="samba_start_precmd"
-start_cmd="samba_cmd"
-stop_cmd="samba_cmd"
-status_cmd="samba_cmd"
 restart_precmd="samba_checkconfig"
 reload_precmd="samba_checkconfig"
-reload_cmd="samba_reload_cmd"
-rcvar_cmd="samba_rcvar_cmd"
-#
-samba_daemons="nmbd smbd"
-%%WINBIND%%samba_daemons="${samba_daemons} winbindd"
+
+reload_cmd="samba_daemons_command"
+restart_cmd="samba_daemons_command"
+start_cmd="samba_daemons_command"
+status_cmd="samba_daemons_command"
+stop_cmd="samba_daemons_command"
+
 # Requirements
-required_files="${samba_config}"
-required_dirs="${samba_lockdir}"
+required_files="$samba_config"
+required_dirs="$samba_lockdir"
 
-samba_checkconfig() {
-    echo -n "Performing sanity check on Samba configuration: "
-    if ${testparm_command} -s ${samba_config:+"${samba_config}"} >/dev/null 2>&1; then
-	echo "OK"
-    else
-	echo "FAILED"
-	return 1
-    fi
-    return 0
-}
+samba_start_precmd()
+{
+	local file
 
-samba_start_precmd() {
-    # XXX: Never delete winbindd_idmap, winbindd_cache and group_mapping
-    if [ -n "${samba_lockdir}" -a -d "${samba_lockdir}" ]; then
+	# XXX: Never delete winbindd_idmap, winbindd_cache and group_mapping
 	echo -n "Removing stale Samba tdb files: "
 	for file in brlock.tdb browse.dat connections.tdb gencache.tdb \
 		    locking.tdb messages.tdb namelist.debug sessionid.tdb \
 		    unexpected.tdb
 	do
-	    rm "${samba_lockdir}/${file}" </dev/null 2>/dev/null && echo -n '.'
+		rm "${samba_lockdir}/${file}" </dev/null \
+		    2>/dev/null && echo -n '.'
 	done
 	echo " done"
-    fi
 }
 
-samba_rcvar_cmd() {
-    local rcvar
-    rcvar=$(set_rcvar ${name})
-    eval ${rcvar}=\${real_${rcvar}}
-    # Prevent recursive calling
-    unset "${rc_arg}_cmd" "${rc_arg}_precmd" "${rc_arg}_postcmd"
-    # Check master variable
-    run_rc_command "${_rc_prefix}${rc_arg}" ${rc_extra_args}
-}
-
-samba_reload_cmd() {
-    local name rcvar command pidfile
-    # Prevent recursive calling
-    unset "${rc_arg}_cmd" "${rc_arg}_precmd" "${rc_arg}_postcmd"
-    # Apply to all daemons
-    for name in ${samba_daemons}; do
-    	rcvar=$(set_rcvar ${name})
-	command="%%PREFIX%%/sbin/${name}"
-	pidfile="%%SAMBA_RUNDIR%%/${name}${pid_extra}.pid"
-	# Daemon should be enabled and running
-	if [ -n "${rcvar}" ] && checkyesno "${rcvar}"; then
-	    if [ -n "$(check_pidfile "${pidfile}" "${command}")" ]; then
-		debug "reloading ${name} configuration"
-		echo "Reloading ${name}."
-		# XXX: Hack with pid_extra
-		${smbcontrol_command} "${name}${pid_extra}" 'reload-config' ${command_args} >/dev/null 2>&1
-	    fi
+samba_checkconfig()
+{
+	echo -n "Performing sanity check on Samba configuration: "
+	${testparm_cmd} -s ${samba_config:+"${samba_config}"} >/dev/null 2>&1
+	if [ $? -eq 0 ]; then
+		echo "OK"
+	else
+		echo "FAILED"
+		return 1
 	fi
-    done
 }
 
-samba_cmd() {
-    local name rcvar rcvars v command pidfile samba_daemons result
-    # Prevent recursive calling
-    unset "${rc_arg}_cmd" "${rc_arg}_precmd" "${rc_arg}_postcmd"
-    # Stop processes in the reverse order
-    if [ "${rc_arg}" = "stop" ] ; then
-	samba_daemons=$(reverse_list ${samba_daemons})
-    fi
-    # Assume success
-    result=0
-    # Apply to all daemons
-    for name in ${samba_daemons}; do
-	rcvar=$(set_rcvar ${name})
-	# XXX
-	rcvars=''; v=''
-	command="%%PREFIX%%/sbin/${name}"
-	pidfile="%%SAMBA_RUNDIR%%/${name}${pid_extra}.pid"
-	# Daemon should be enabled and running
-	if [ -n "${rcvar}" ] && checkyesno "${rcvar}"; then
-	    run_rc_command "${_rc_prefix}${rc_arg}" ${rc_extra_args}
-	    # If any of the of the commands failed, take it as a total result
-	    result=$((${result} || $?))
+samba_daemons_command()
+{
+	local rc service
+
+	if [ $rc_arg = "stop" ]; then
+		samba_daemons=$(reverse_list $samba_daemons)
 	fi
-    done
-    return ${result}
+	for service in $samba_daemons; do
+		service $service ${_rc_prefix}${rc_arg} ${rc_extra_args}
+		if [ $? -ne 0 ]; then
+			rc=1
+		fi
+	done
+	return $rc
 }
 
 run_rc_command "$1"
Index: net/samba36/files/smbd.in
===================================================================
RCS file: net/samba36/files/smbd.in
diff -N net/samba36/files/smbd.in
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ net/samba36/files/smbd.in	27 Jan 2012 20:24:54 -0000
@@ -0,0 +1,31 @@
+#!/bin/sh
+#
+# $FreeBSD$
+
+# PROVIDE: smbd
+# REQUIRE: NETWORKING SERVERS DAEMON ldconfig resolv
+# BEFORE: LOGIN
+# KEYWORD: shutdown
+#
+# See .../rc.d/samba for more details.
+#
+
+name="smbd"
+
+. /etc/rc.subr
+. %%SAMBA_CONFDIR%%/rc.samba
+
+rcvar=$(set_rcvar)
+
+load_rc_config $name
+
+: ${samba_enable=NO}
+: ${smbd_enable=NO}
+if ! checkyesno ${name}_enable && checkyesno samba_enable; then
+	eval ${name}_enable="YES"
+fi
+: ${smbd_flags="-D"}
+
+reload_cmd="reload_cmd"
+
+run_rc_command "$1"
Index: net/samba36/files/winbindd.in
===================================================================
RCS file: net/samba36/files/winbindd.in
diff -N net/samba36/files/winbindd.in
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ net/samba36/files/winbindd.in	27 Jan 2012 20:24:54 -0000
@@ -0,0 +1,34 @@
+#!/bin/sh
+#
+# $FreeBSD$
+
+# PROVIDE: winbindd
+# REQUIRE: NETWORKING SERVERS DAEMON ldconfig resolv
+# BEFORE: LOGIN
+# KEYWORD: shutdown
+#
+# See .../rc.d/samba for more details.
+#
+
+name="winbindd"
+
+. /etc/rc.subr
+. %%SAMBA_CONFDIR%%/rc.samba
+
+rcvar=$(set_rcvar)
+
+load_rc_config $name
+
+: ${samba_enable=NO}
+: ${winbindd_enable=NO}
+if ! checkyesno ${name}_enable; then
+	samba_idmap=$(${samba_parm} 'idmap uid' "${samba_config}" 2>/dev/null)
+	if [ -n "${samba_idmap:-}" ]; then
+		eval ${name}_enable="YES"
+	fi
+fi
+: ${winbindd_flags="-D"}
+
+reload_cmd="reload_cmd"
+
+run_rc_command "$1"
